// This file was generated by cswinrt.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Windows.Networking.Connectivity
{
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class AttributedNetworkUsage : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<AttributedNetworkUsage>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<IAttributedNetworkUsage> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private IAttributedNetworkUsage _default => _defaultLazy.Value;

        public static AttributedNetworkUsage FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<AttributedNetworkUsage>.FromAbi(thisPtr);
        }

        internal AttributedNetworkUsage(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(IAttributedNetworkUsage).GetHelperType()));
            _defaultLazy = new Lazy<IAttributedNetworkUsage>(() => (IAttributedNetworkUsage)new SingleInterfaceOptimizedObject(typeof(IAttributedNetworkUsage), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
            };
        }

        public static bool operator ==(AttributedNetworkUsage x, AttributedNetworkUsage y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(AttributedNetworkUsage x, AttributedNetworkUsage y) => !(x == y);
        public bool Equals(AttributedNetworkUsage other) => this == other;
        public override bool Equals(object obj) => obj is AttributedNetworkUsage that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private IAttributedNetworkUsage AsInternal(InterfaceTag<IAttributedNetworkUsage> _) => _default;

        public string AttributionId => _default.AttributionId;

        public string AttributionName => _default.AttributionName;

        public global::Windows.Storage.Streams.IRandomAccessStreamReference AttributionThumbnail => _default.AttributionThumbnail;

        public ulong BytesReceived => _default.BytesReceived;

        public ulong BytesSent => _default.BytesSent;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum CellularApnAuthenticationType : int
    {
        None = unchecked((int)0),
        Pap = unchecked((int)0x1),
        Chap = unchecked((int)0x2),
        Mschapv2 = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class CellularApnContext : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<CellularApnContext>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<ICellularApnContext> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private ICellularApnContext _default => _defaultLazy.Value;

        public CellularApnContext() : this((ActivationFactory<CellularApnContext>.ActivateInstance<IUnknownVftbl>()))
        {
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);
        }

        public static CellularApnContext FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<CellularApnContext>.FromAbi(thisPtr);
        }

        internal CellularApnContext(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(ICellularApnContext).GetHelperType()));
            _defaultLazy = new Lazy<ICellularApnContext>(() => (ICellularApnContext)new SingleInterfaceOptimizedObject(typeof(ICellularApnContext), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
                {typeof(ICellularApnContext2), new Lazy<ICellularApnContext2>(() => (ICellularApnContext2)(object)new SingleInterfaceOptimizedObject(typeof(ICellularApnContext2), _inner ?? ((IWinRTObject)this).NativeObject))},
            };
        }

        public static bool operator ==(CellularApnContext x, CellularApnContext y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(CellularApnContext x, CellularApnContext y) => !(x == y);
        public bool Equals(CellularApnContext other) => this == other;
        public override bool Equals(object obj) => obj is CellularApnContext that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private ICellularApnContext AsInternal(InterfaceTag<ICellularApnContext> _) => _default;

        private ICellularApnContext2 AsInternal(InterfaceTag<ICellularApnContext2> _) =>  ((Lazy<ICellularApnContext2>)_lazyInterfaces[typeof(ICellularApnContext2)]).Value;

        public string AccessPointName
        {
            get => _default.AccessPointName;
            set => _default.AccessPointName = value;
        }

        public CellularApnAuthenticationType AuthenticationType
        {
            get => _default.AuthenticationType;
            set => _default.AuthenticationType = value;
        }

        public bool IsCompressionEnabled
        {
            get => _default.IsCompressionEnabled;
            set => _default.IsCompressionEnabled = value;
        }

        public string Password
        {
            get => _default.Password;
            set => _default.Password = value;
        }

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.17134.0")]
        public string ProfileName
        {
            get => AsInternal(new InterfaceTag<ICellularApnContext2>()).ProfileName;
            set => AsInternal(new InterfaceTag<ICellularApnContext2>()).ProfileName = value;
        }

        public string ProviderId
        {
            get => _default.ProviderId;
            set => _default.ProviderId = value;
        }

        public string UserName
        {
            get => _default.UserName;
            set => _default.UserName = value;
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class ConnectionCost : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ConnectionCost>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<IConnectionCost> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private IConnectionCost _default => _defaultLazy.Value;

        public static ConnectionCost FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ConnectionCost>.FromAbi(thisPtr);
        }

        internal ConnectionCost(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(IConnectionCost).GetHelperType()));
            _defaultLazy = new Lazy<IConnectionCost>(() => (IConnectionCost)new SingleInterfaceOptimizedObject(typeof(IConnectionCost), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
                {typeof(IConnectionCost2), new Lazy<IConnectionCost2>(() => (IConnectionCost2)(object)new SingleInterfaceOptimizedObject(typeof(IConnectionCost2), _inner ?? ((IWinRTObject)this).NativeObject))},
            };
        }

        public static bool operator ==(ConnectionCost x, ConnectionCost y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ConnectionCost x, ConnectionCost y) => !(x == y);
        public bool Equals(ConnectionCost other) => this == other;
        public override bool Equals(object obj) => obj is ConnectionCost that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private IConnectionCost AsInternal(InterfaceTag<IConnectionCost> _) => _default;

        private IConnectionCost2 AsInternal(InterfaceTag<IConnectionCost2> _) =>  ((Lazy<IConnectionCost2>)_lazyInterfaces[typeof(IConnectionCost2)]).Value;

        public bool ApproachingDataLimit => _default.ApproachingDataLimit;

        public bool BackgroundDataUsageRestricted => AsInternal(new InterfaceTag<IConnectionCost2>()).BackgroundDataUsageRestricted;

        public NetworkCostType NetworkCostType => _default.NetworkCostType;

        public bool OverDataLimit => _default.OverDataLimit;

        public bool Roaming => _default.Roaming;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class ConnectionProfile : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ConnectionProfile>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<IConnectionProfile> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private IConnectionProfile _default => _defaultLazy.Value;

        public static ConnectionProfile FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ConnectionProfile>.FromAbi(thisPtr);
        }

        internal ConnectionProfile(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(IConnectionProfile).GetHelperType()));
            _defaultLazy = new Lazy<IConnectionProfile>(() => (IConnectionProfile)new SingleInterfaceOptimizedObject(typeof(IConnectionProfile), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
                {typeof(IConnectionProfile2), new Lazy<IConnectionProfile2>(() => (IConnectionProfile2)(object)new SingleInterfaceOptimizedObject(typeof(IConnectionProfile2), _inner ?? ((IWinRTObject)this).NativeObject))},
                {typeof(IConnectionProfile3), new Lazy<IConnectionProfile3>(() => (IConnectionProfile3)(object)new SingleInterfaceOptimizedObject(typeof(IConnectionProfile3), _inner ?? ((IWinRTObject)this).NativeObject))},
                {typeof(IConnectionProfile4), new Lazy<IConnectionProfile4>(() => (IConnectionProfile4)(object)new SingleInterfaceOptimizedObject(typeof(IConnectionProfile4), _inner ?? ((IWinRTObject)this).NativeObject))},
                {typeof(IConnectionProfile5), new Lazy<IConnectionProfile5>(() => (IConnectionProfile5)(object)new SingleInterfaceOptimizedObject(typeof(IConnectionProfile5), _inner ?? ((IWinRTObject)this).NativeObject))},
            };
        }

        public static bool operator ==(ConnectionProfile x, ConnectionProfile y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ConnectionProfile x, ConnectionProfile y) => !(x == y);
        public bool Equals(ConnectionProfile other) => this == other;
        public override bool Equals(object obj) => obj is ConnectionProfile that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private IConnectionProfile AsInternal(InterfaceTag<IConnectionProfile> _) => _default;

        public NetworkConnectivityLevel GetNetworkConnectivityLevel() => _default.GetNetworkConnectivityLevel();

        public global::System.Collections.Generic.IReadOnlyList<string> GetNetworkNames() => _default.GetNetworkNames();

        public ConnectionCost GetConnectionCost() => _default.GetConnectionCost();

        public DataPlanStatus GetDataPlanStatus() => _default.GetDataPlanStatus();

        public DataUsage GetLocalUsage(global::System.DateTimeOffset StartTime, global::System.DateTimeOffset EndTime) => _default.GetLocalUsage(StartTime, EndTime);

        public DataUsage GetLocalUsage(global::System.DateTimeOffset StartTime, global::System.DateTimeOffset EndTime, RoamingStates States) => _default.GetLocalUsage(StartTime, EndTime, States);

        private IConnectionProfile2 AsInternal(InterfaceTag<IConnectionProfile2> _) =>  ((Lazy<IConnectionProfile2>)_lazyInterfaces[typeof(IConnectionProfile2)]).Value;

        public global::System.Nullable<byte> GetSignalBars() => AsInternal(new InterfaceTag<IConnectionProfile2>()).GetSignalBars();

        public DomainConnectivityLevel GetDomainConnectivityLevel() => AsInternal(new InterfaceTag<IConnectionProfile2>()).GetDomainConnectivityLevel();

        public global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<NetworkUsage>> GetNetworkUsageAsync(global::System.DateTimeOffset startTime, global::System.DateTimeOffset endTime, DataUsageGranularity granularity, NetworkUsageStates states) => AsInternal(new InterfaceTag<IConnectionProfile2>()).GetNetworkUsageAsync(startTime, endTime, granularity, states);

        public global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<ConnectivityInterval>> GetConnectivityIntervalsAsync(global::System.DateTimeOffset startTime, global::System.DateTimeOffset endTime, NetworkUsageStates states) => AsInternal(new InterfaceTag<IConnectionProfile2>()).GetConnectivityIntervalsAsync(startTime, endTime, states);

        private IConnectionProfile3 AsInternal(InterfaceTag<IConnectionProfile3> _) =>  ((Lazy<IConnectionProfile3>)_lazyInterfaces[typeof(IConnectionProfile3)]).Value;

        public global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<AttributedNetworkUsage>> GetAttributedNetworkUsageAsync(global::System.DateTimeOffset startTime, global::System.DateTimeOffset endTime, NetworkUsageStates states) => AsInternal(new InterfaceTag<IConnectionProfile3>()).GetAttributedNetworkUsageAsync(startTime, endTime, states);

        private IConnectionProfile4 AsInternal(InterfaceTag<IConnectionProfile4> _) =>  ((Lazy<IConnectionProfile4>)_lazyInterfaces[typeof(IConnectionProfile4)]).Value;

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.16299.0")]
        public global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<ProviderNetworkUsage>> GetProviderNetworkUsageAsync(global::System.DateTimeOffset startTime, global::System.DateTimeOffset endTime, NetworkUsageStates states) => AsInternal(new InterfaceTag<IConnectionProfile4>()).GetProviderNetworkUsageAsync(startTime, endTime, states);

        private IConnectionProfile5 AsInternal(InterfaceTag<IConnectionProfile5> _) =>  ((Lazy<IConnectionProfile5>)_lazyInterfaces[typeof(IConnectionProfile5)]).Value;

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.17763.0")]
        public global::Windows.Foundation.IAsyncOperation<ConnectionProfileDeleteStatus> TryDeleteAsync() => AsInternal(new InterfaceTag<IConnectionProfile5>()).TryDeleteAsync();

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.17763.0")]
        public bool CanDelete => AsInternal(new InterfaceTag<IConnectionProfile5>()).CanDelete;

        public bool IsWlanConnectionProfile => AsInternal(new InterfaceTag<IConnectionProfile2>()).IsWlanConnectionProfile;

        public bool IsWwanConnectionProfile => AsInternal(new InterfaceTag<IConnectionProfile2>()).IsWwanConnectionProfile;

        public NetworkAdapter NetworkAdapter => _default.NetworkAdapter;

        public NetworkSecuritySettings NetworkSecuritySettings => _default.NetworkSecuritySettings;

        public string ProfileName => _default.ProfileName;

        public global::System.Nullable<Guid> ServiceProviderGuid => AsInternal(new InterfaceTag<IConnectionProfile2>()).ServiceProviderGuid;

        public WlanConnectionProfileDetails WlanConnectionProfileDetails => AsInternal(new InterfaceTag<IConnectionProfile2>()).WlanConnectionProfileDetails;

        public WwanConnectionProfileDetails WwanConnectionProfileDetails => AsInternal(new InterfaceTag<IConnectionProfile2>()).WwanConnectionProfileDetails;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 458752u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.17763.0")]
    public enum ConnectionProfileDeleteStatus : int
    {
        Success = unchecked((int)0),
        DeniedByUser = unchecked((int)0x1),
        DeniedBySystem = unchecked((int)0x2),
        UnknownError = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class ConnectionProfileFilter : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ConnectionProfileFilter>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<IConnectionProfileFilter> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private IConnectionProfileFilter _default => _defaultLazy.Value;

        public ConnectionProfileFilter() : this((ActivationFactory<ConnectionProfileFilter>.ActivateInstance<IUnknownVftbl>()))
        {
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);
        }

        public static ConnectionProfileFilter FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ConnectionProfileFilter>.FromAbi(thisPtr);
        }

        internal ConnectionProfileFilter(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(IConnectionProfileFilter).GetHelperType()));
            _defaultLazy = new Lazy<IConnectionProfileFilter>(() => (IConnectionProfileFilter)new SingleInterfaceOptimizedObject(typeof(IConnectionProfileFilter), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
                {typeof(IConnectionProfileFilter2), new Lazy<IConnectionProfileFilter2>(() => (IConnectionProfileFilter2)(object)new SingleInterfaceOptimizedObject(typeof(IConnectionProfileFilter2), _inner ?? ((IWinRTObject)this).NativeObject))},
                {typeof(IConnectionProfileFilter3), new Lazy<IConnectionProfileFilter3>(() => (IConnectionProfileFilter3)(object)new SingleInterfaceOptimizedObject(typeof(IConnectionProfileFilter3), _inner ?? ((IWinRTObject)this).NativeObject))},
            };
        }

        public static bool operator ==(ConnectionProfileFilter x, ConnectionProfileFilter y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ConnectionProfileFilter x, ConnectionProfileFilter y) => !(x == y);
        public bool Equals(ConnectionProfileFilter other) => this == other;
        public override bool Equals(object obj) => obj is ConnectionProfileFilter that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private IConnectionProfileFilter AsInternal(InterfaceTag<IConnectionProfileFilter> _) => _default;

        private IConnectionProfileFilter2 AsInternal(InterfaceTag<IConnectionProfileFilter2> _) =>  ((Lazy<IConnectionProfileFilter2>)_lazyInterfaces[typeof(IConnectionProfileFilter2)]).Value;

        private IConnectionProfileFilter3 AsInternal(InterfaceTag<IConnectionProfileFilter3> _) =>  ((Lazy<IConnectionProfileFilter3>)_lazyInterfaces[typeof(IConnectionProfileFilter3)]).Value;

        public global::System.Nullable<bool> IsBackgroundDataUsageRestricted
        {
            get => AsInternal(new InterfaceTag<IConnectionProfileFilter2>()).IsBackgroundDataUsageRestricted;
            set => AsInternal(new InterfaceTag<IConnectionProfileFilter2>()).IsBackgroundDataUsageRestricted = value;
        }

        public bool IsConnected
        {
            get => _default.IsConnected;
            set => _default.IsConnected = value;
        }

        public global::System.Nullable<bool> IsOverDataLimit
        {
            get => AsInternal(new InterfaceTag<IConnectionProfileFilter2>()).IsOverDataLimit;
            set => AsInternal(new InterfaceTag<IConnectionProfileFilter2>()).IsOverDataLimit = value;
        }

        public global::System.Nullable<bool> IsRoaming
        {
            get => AsInternal(new InterfaceTag<IConnectionProfileFilter2>()).IsRoaming;
            set => AsInternal(new InterfaceTag<IConnectionProfileFilter2>()).IsRoaming = value;
        }

        public bool IsWlanConnectionProfile
        {
            get => _default.IsWlanConnectionProfile;
            set => _default.IsWlanConnectionProfile = value;
        }

        public bool IsWwanConnectionProfile
        {
            get => _default.IsWwanConnectionProfile;
            set => _default.IsWwanConnectionProfile = value;
        }

        public NetworkCostType NetworkCostType
        {
            get => _default.NetworkCostType;
            set => _default.NetworkCostType = value;
        }

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.17134.0")]
        public global::System.Nullable<Guid> PurposeGuid
        {
            get => AsInternal(new InterfaceTag<IConnectionProfileFilter3>()).PurposeGuid;
            set => AsInternal(new InterfaceTag<IConnectionProfileFilter3>()).PurposeGuid = value;
        }

        public global::Windows.Storage.Streams.IBuffer RawData => AsInternal(new InterfaceTag<IConnectionProfileFilter2>()).RawData;

        public global::System.Nullable<Guid> ServiceProviderGuid
        {
            get => _default.ServiceProviderGuid;
            set => _default.ServiceProviderGuid = value;
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class ConnectionSession : global::System.IDisposable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ConnectionSession>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<IConnectionSession> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private IConnectionSession _default => _defaultLazy.Value;

        public static ConnectionSession FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ConnectionSession>.FromAbi(thisPtr);
        }

        internal ConnectionSession(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(IConnectionSession).GetHelperType()));
            _defaultLazy = new Lazy<IConnectionSession>(() => (IConnectionSession)new SingleInterfaceOptimizedObject(typeof(IConnectionSession), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
                {typeof(global::System.IDisposable), new Lazy<global::System.IDisposable>(() => (global::System.IDisposable)(object)new SingleInterfaceOptimizedObject(typeof(global::System.IDisposable), _inner ?? ((IWinRTObject)this).NativeObject))},
            };
        }

        public static bool operator ==(ConnectionSession x, ConnectionSession y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ConnectionSession x, ConnectionSession y) => !(x == y);
        public bool Equals(ConnectionSession other) => this == other;
        public override bool Equals(object obj) => obj is ConnectionSession that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private IConnectionSession AsInternal(InterfaceTag<IConnectionSession> _) => _default;

        private global::System.IDisposable AsInternal(InterfaceTag<global::System.IDisposable> _) =>  ((Lazy<global::System.IDisposable>)_lazyInterfaces[typeof(global::System.IDisposable)]).Value;

        public void Dispose() => AsInternal(new InterfaceTag<global::System.IDisposable>()).Dispose();

        public ConnectionProfile ConnectionProfile => _default.ConnectionProfile;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class ConnectivityInterval : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ConnectivityInterval>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<IConnectivityInterval> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private IConnectivityInterval _default => _defaultLazy.Value;

        public static ConnectivityInterval FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ConnectivityInterval>.FromAbi(thisPtr);
        }

        internal ConnectivityInterval(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(IConnectivityInterval).GetHelperType()));
            _defaultLazy = new Lazy<IConnectivityInterval>(() => (IConnectivityInterval)new SingleInterfaceOptimizedObject(typeof(IConnectivityInterval), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
            };
        }

        public static bool operator ==(ConnectivityInterval x, ConnectivityInterval y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ConnectivityInterval x, ConnectivityInterval y) => !(x == y);
        public bool Equals(ConnectivityInterval other) => this == other;
        public override bool Equals(object obj) => obj is ConnectivityInterval that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private IConnectivityInterval AsInternal(InterfaceTag<IConnectivityInterval> _) => _default;

        public global::System.TimeSpan ConnectionDuration => _default.ConnectionDuration;

        public global::System.DateTimeOffset StartTime => _default.StartTime;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    public static class ConnectivityManager
    {

        internal static BaseActivationFactory _factory = new BaseActivationFactory("Windows.Networking.Connectivity", "Windows.Networking.Connectivity.ConnectivityManager");
        public static I As<I>() => _factory.AsInterface<I>();

        internal class _IConnectivityManagerStatics : IWinRTObject
        {
            private IObjectReference _obj;
            public _IConnectivityManagerStatics()
            {
                _obj = (new BaseActivationFactory("Windows.Networking.Connectivity", "Windows.Networking.Connectivity.ConnectivityManager"))._As(GuidGenerator.GetIID(typeof(Windows.Networking.Connectivity.IConnectivityManagerStatics).GetHelperType()));
            }

            private static readonly WeakLazy<_IConnectivityManagerStatics> _instance = new WeakLazy<_IConnectivityManagerStatics>();
            internal static IConnectivityManagerStatics Instance => (IConnectivityManagerStatics)_instance.Value;

            IObjectReference IWinRTObject.NativeObject => _obj;
            bool IWinRTObject.HasUnwrappableNativeObject => false;
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();
        }

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static global::Windows.Foundation.IAsyncOperation<ConnectionSession> AcquireConnectionAsync(CellularApnContext cellularApnContext) => _IConnectivityManagerStatics.Instance.AcquireConnectionAsync(cellularApnContext);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static void AddHttpRoutePolicy(RoutePolicy routePolicy) => _IConnectivityManagerStatics.Instance.AddHttpRoutePolicy(routePolicy);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static void RemoveHttpRoutePolicy(RoutePolicy routePolicy) => _IConnectivityManagerStatics.Instance.RemoveHttpRoutePolicy(routePolicy);
    }[global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class DataPlanStatus : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DataPlanStatus>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<IDataPlanStatus> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private IDataPlanStatus _default => _defaultLazy.Value;

        public static DataPlanStatus FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DataPlanStatus>.FromAbi(thisPtr);
        }

        internal DataPlanStatus(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(IDataPlanStatus).GetHelperType()));
            _defaultLazy = new Lazy<IDataPlanStatus>(() => (IDataPlanStatus)new SingleInterfaceOptimizedObject(typeof(IDataPlanStatus), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
            };
        }

        public static bool operator ==(DataPlanStatus x, DataPlanStatus y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DataPlanStatus x, DataPlanStatus y) => !(x == y);
        public bool Equals(DataPlanStatus other) => this == other;
        public override bool Equals(object obj) => obj is DataPlanStatus that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private IDataPlanStatus AsInternal(InterfaceTag<IDataPlanStatus> _) => _default;

        public global::System.Nullable<uint> DataLimitInMegabytes => _default.DataLimitInMegabytes;

        public DataPlanUsage DataPlanUsage => _default.DataPlanUsage;

        public global::System.Nullable<ulong> InboundBitsPerSecond => _default.InboundBitsPerSecond;

        public global::System.Nullable<uint> MaxTransferSizeInMegabytes => _default.MaxTransferSizeInMegabytes;

        public global::System.Nullable<global::System.DateTimeOffset> NextBillingCycle => _default.NextBillingCycle;

        public global::System.Nullable<ulong> OutboundBitsPerSecond => _default.OutboundBitsPerSecond;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class DataPlanUsage : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DataPlanUsage>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<IDataPlanUsage> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private IDataPlanUsage _default => _defaultLazy.Value;

        public static DataPlanUsage FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DataPlanUsage>.FromAbi(thisPtr);
        }

        internal DataPlanUsage(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(IDataPlanUsage).GetHelperType()));
            _defaultLazy = new Lazy<IDataPlanUsage>(() => (IDataPlanUsage)new SingleInterfaceOptimizedObject(typeof(IDataPlanUsage), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
            };
        }

        public static bool operator ==(DataPlanUsage x, DataPlanUsage y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DataPlanUsage x, DataPlanUsage y) => !(x == y);
        public bool Equals(DataPlanUsage other) => this == other;
        public override bool Equals(object obj) => obj is DataPlanUsage that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private IDataPlanUsage AsInternal(InterfaceTag<IDataPlanUsage> _) => _default;

        public global::System.DateTimeOffset LastSyncTime => _default.LastSyncTime;

        public uint MegabytesUsed => _default.MegabytesUsed;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class DataUsage : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<DataUsage>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<IDataUsage> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private IDataUsage _default => _defaultLazy.Value;

        public static DataUsage FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<DataUsage>.FromAbi(thisPtr);
        }

        internal DataUsage(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(IDataUsage).GetHelperType()));
            _defaultLazy = new Lazy<IDataUsage>(() => (IDataUsage)new SingleInterfaceOptimizedObject(typeof(IDataUsage), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
            };
        }

        public static bool operator ==(DataUsage x, DataUsage y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(DataUsage x, DataUsage y) => !(x == y);
        public bool Equals(DataUsage other) => this == other;
        public override bool Equals(object obj) => obj is DataUsage that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private IDataUsage AsInternal(InterfaceTag<IDataUsage> _) => _default;

        public ulong BytesReceived => _default.BytesReceived;

        public ulong BytesSent => _default.BytesSent;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum DataUsageGranularity : int
    {
        PerMinute = unchecked((int)0),
        PerHour = unchecked((int)0x1),
        PerDay = unchecked((int)0x2),
        Total = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum DomainConnectivityLevel : int
    {
        None = unchecked((int)0),
        Unauthenticated = unchecked((int)0x1),
        Authenticated = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("F769B039-ECA2-45EB-ADE1-B0368B756C49")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IAttributedNetworkUsage
    {
        string AttributionId { get; }
        string AttributionName { get; }
        global::Windows.Storage.Streams.IRandomAccessStreamReference AttributionThumbnail { get; }
        ulong BytesReceived { get; }
        ulong BytesSent { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("6FA529F4-EFFD-4542-9AB2-705BBF94943A")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface ICellularApnContext
    {
        string AccessPointName { get; set; }
        CellularApnAuthenticationType AuthenticationType { get; set; }
        bool IsCompressionEnabled { get; set; }
        string Password { get; set; }
        string ProviderId { get; set; }
        string UserName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("76B0EB1A-AC49-4350-B1E5-DC4763BC69C7")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 393216u)]
    internal interface ICellularApnContext2
    {
        string ProfileName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("BAD7D829-3416-4B10-A202-BAC0B075BDAE")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IConnectionCost
    {
        bool ApproachingDataLimit { get; }
        NetworkCostType NetworkCostType { get; }
        bool OverDataLimit { get; }
        bool Roaming { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("8E113A05-E209-4549-BB25-5E0DB691CB05")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IConnectionCost2
    {
        bool BackgroundDataUsageRestricted { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("71BA143C-598E-49D0-84EB-8FEBAEDCC195")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IConnectionProfile
    {
        NetworkConnectivityLevel GetNetworkConnectivityLevel();
        global::System.Collections.Generic.IReadOnlyList<string> GetNetworkNames();
        ConnectionCost GetConnectionCost();
        DataPlanStatus GetDataPlanStatus();
        [Windows.Foundation.Metadata.Overload("GetLocalUsage")]
        DataUsage GetLocalUsage(global::System.DateTimeOffset StartTime, global::System.DateTimeOffset EndTime);
        [Windows.Foundation.Metadata.Overload("GetLocalUsagePerRoamingStates")]
        DataUsage GetLocalUsage(global::System.DateTimeOffset StartTime, global::System.DateTimeOffset EndTime, RoamingStates States);
        NetworkAdapter NetworkAdapter { get; }
        NetworkSecuritySettings NetworkSecuritySettings { get; }
        string ProfileName { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("E2045145-4C9F-400C-9150-7EC7D6E2888A")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IConnectionProfile2
    {
        global::System.Nullable<byte> GetSignalBars();
        DomainConnectivityLevel GetDomainConnectivityLevel();
        global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<NetworkUsage>> GetNetworkUsageAsync(global::System.DateTimeOffset startTime, global::System.DateTimeOffset endTime, DataUsageGranularity granularity, NetworkUsageStates states);
        global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<ConnectivityInterval>> GetConnectivityIntervalsAsync(global::System.DateTimeOffset startTime, global::System.DateTimeOffset endTime, NetworkUsageStates states);
        bool IsWlanConnectionProfile { get; }
        bool IsWwanConnectionProfile { get; }
        global::System.Nullable<Guid> ServiceProviderGuid { get; }
        WlanConnectionProfileDetails WlanConnectionProfileDetails { get; }
        WwanConnectionProfileDetails WwanConnectionProfileDetails { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("578C2528-4CD9-4161-8045-201CFD5B115C")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IConnectionProfile3
    {
        global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<AttributedNetworkUsage>> GetAttributedNetworkUsageAsync(global::System.DateTimeOffset startTime, global::System.DateTimeOffset endTime, NetworkUsageStates states);
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("7A2D42CD-81E0-4AE6-ABED-AB9CA13EB714")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 327680u)]
    internal interface IConnectionProfile4
    {
        global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<ProviderNetworkUsage>> GetProviderNetworkUsageAsync(global::System.DateTimeOffset startTime, global::System.DateTimeOffset endTime, NetworkUsageStates states);
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("85361EC7-9C73-4BE0-8F14-578EEC71EE0E")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 458752u)]
    internal interface IConnectionProfile5
    {
        global::Windows.Foundation.IAsyncOperation<ConnectionProfileDeleteStatus> TryDeleteAsync();
        bool CanDelete { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("204C7CC8-BD2D-4E8D-A4B3-455EC337388A")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IConnectionProfileFilter
    {
        bool IsConnected { get; set; }
        bool IsWlanConnectionProfile { get; set; }
        bool IsWwanConnectionProfile { get; set; }
        NetworkCostType NetworkCostType { get; set; }
        global::System.Nullable<Guid> ServiceProviderGuid { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("CD068EE1-C3FC-4FAD-9DDC-593FAA4B7885")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IConnectionProfileFilter2
    {
        global::System.Nullable<bool> IsBackgroundDataUsageRestricted { get; set; }
        global::System.Nullable<bool> IsOverDataLimit { get; set; }
        global::System.Nullable<bool> IsRoaming { get; set; }
        global::Windows.Storage.Streams.IBuffer RawData { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("0AAA09C0-5014-447C-8809-AEE4CB0AF94A")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 393216u)]
    internal interface IConnectionProfileFilter3
    {
        global::System.Nullable<Guid> PurposeGuid { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("FF905D4C-F83B-41B0-8A0C-1462D9C56B73")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IConnectionSession : global::System.IDisposable
    {
        ConnectionProfile ConnectionProfile { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("4FAA3FFF-6746-4824-A964-EED8E87F8709")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IConnectivityInterval
    {
        global::System.TimeSpan ConnectionDuration { get; }
        global::System.DateTimeOffset StartTime { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("5120D4B1-4FB1-48B0-AFC9-42E0092A8164")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IConnectivityManagerStatics
    {
        global::Windows.Foundation.IAsyncOperation<ConnectionSession> AcquireConnectionAsync(CellularApnContext cellularApnContext);
        void AddHttpRoutePolicy(RoutePolicy routePolicy);
        void RemoveHttpRoutePolicy(RoutePolicy routePolicy);
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("977A8B8C-3885-40F3-8851-42CD2BD568BB")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDataPlanStatus
    {
        global::System.Nullable<uint> DataLimitInMegabytes { get; }
        DataPlanUsage DataPlanUsage { get; }
        global::System.Nullable<ulong> InboundBitsPerSecond { get; }
        global::System.Nullable<uint> MaxTransferSizeInMegabytes { get; }
        global::System.Nullable<global::System.DateTimeOffset> NextBillingCycle { get; }
        global::System.Nullable<ulong> OutboundBitsPerSecond { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("B921492D-3B44-47FF-B361-BE59E69ED1B0")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDataPlanUsage
    {
        global::System.DateTimeOffset LastSyncTime { get; }
        uint MegabytesUsed { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("C1431DD3-B146-4D39-B959-0C69B096C512")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IDataUsage
    {
        ulong BytesReceived { get; }
        ulong BytesSent { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("D85145E0-138F-47D7-9B3A-36BB488CEF33")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IIPInformation
    {
        NetworkAdapter NetworkAdapter { get; }
        global::System.Nullable<byte> PrefixLength { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("48AA53AA-1108-4546-A6CB-9A74DA4B7BA0")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface ILanIdentifier
    {
        LanIdentifierData InfrastructureId { get; }
        Guid NetworkAdapterId { get; }
        LanIdentifierData PortId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("A74E83C3-D639-45BE-A36A-C4E4AEAF6D9B")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface ILanIdentifierData
    {
        uint Type { get; }
        global::System.Collections.Generic.IReadOnlyList<byte> Value { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("3B542E03-5388-496C-A8A3-AFFD39AEC2E6")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface INetworkAdapter
    {
        global::Windows.Foundation.IAsyncOperation<ConnectionProfile> GetConnectedProfileAsync();
        uint IanaInterfaceType { get; }
        ulong InboundMaxBitsPerSecond { get; }
        Guid NetworkAdapterId { get; }
        NetworkItem NetworkItem { get; }
        ulong OutboundMaxBitsPerSecond { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("5074F851-950D-4165-9C15-365619481EEA")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface INetworkInformationStatics
    {
        global::System.Collections.Generic.IReadOnlyList<ConnectionProfile> GetConnectionProfiles();
        ConnectionProfile GetInternetConnectionProfile();
        global::System.Collections.Generic.IReadOnlyList<LanIdentifier> GetLanIdentifiers();
        global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.HostName> GetHostNames();
        global::Windows.Foundation.IAsyncOperation<ProxyConfiguration> GetProxyConfigurationAsync(global::System.Uri uri);
        global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.EndpointPair> GetSortedEndpointPairs(global::System.Collections.Generic.IEnumerable<global::Windows.Networking.EndpointPair> destinationList, global::Windows.Networking.HostNameSortOptions sortOptions);
        event NetworkStatusChangedEventHandler NetworkStatusChanged;
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("459CED14-2832-49B6-BA6E-E265F04786A8")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface INetworkInformationStatics2
    {
        global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<ConnectionProfile>> FindConnectionProfilesAsync(ConnectionProfileFilter pProfileFilter);
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("01BC4D39-F5E0-4567-A28C-42080C831B2B")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface INetworkItem
    {
        NetworkTypes GetNetworkTypes();
        Guid NetworkId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("7CA07E8D-917B-4B5F-B84D-28F7A5AC5402")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface INetworkSecuritySettings
    {
        NetworkAuthenticationType NetworkAuthenticationType { get; }
        NetworkEncryptionType NetworkEncryptionType { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("1F0CF333-D7A6-44DD-A4E9-687C476B903D")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface INetworkStateChangeEventDetails
    {
        bool HasNewConnectionCost { get; }
        bool HasNewDomainConnectivityLevel { get; }
        bool HasNewHostNameList { get; }
        bool HasNewInternetConnectionProfile { get; }
        bool HasNewNetworkConnectivityLevel { get; }
        bool HasNewWwanRegistrationState { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("D643C0E8-30D3-4F6A-AD47-6A1873CEB3C1")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface INetworkStateChangeEventDetails2
    {
        bool HasNewTetheringClientCount { get; }
        bool HasNewTetheringOperationalState { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("49DA8FCE-9985-4927-BF5B-072B5C65F8D9")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface INetworkUsage
    {
        ulong BytesReceived { get; }
        ulong BytesSent { get; }
        global::System.TimeSpan ConnectionDuration { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class IPInformation : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<IPInformation>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<IIPInformation> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private IIPInformation _default => _defaultLazy.Value;

        public static IPInformation FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<IPInformation>.FromAbi(thisPtr);
        }

        internal IPInformation(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(IIPInformation).GetHelperType()));
            _defaultLazy = new Lazy<IIPInformation>(() => (IIPInformation)new SingleInterfaceOptimizedObject(typeof(IIPInformation), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
            };
        }

        public static bool operator ==(IPInformation x, IPInformation y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(IPInformation x, IPInformation y) => !(x == y);
        public bool Equals(IPInformation other) => this == other;
        public override bool Equals(object obj) => obj is IPInformation that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private IIPInformation AsInternal(InterfaceTag<IIPInformation> _) => _default;

        public NetworkAdapter NetworkAdapter => _default.NetworkAdapter;

        public global::System.Nullable<byte> PrefixLength => _default.PrefixLength;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("5EC69E04-7931-48C8-B8F3-46300FA42728")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 327680u)]
    internal interface IProviderNetworkUsage
    {
        ulong BytesReceived { get; }
        ulong BytesSent { get; }
        string ProviderId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("EF3A60B4-9004-4DD6-B7D8-B3E502F4AAD0")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IProxyConfiguration
    {
        bool CanConnectDirectly { get; }
        global::System.Collections.Generic.IReadOnlyList<global::System.Uri> ProxyUris { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("11ABC4AC-0FC7-42E4-8742-569923B1CA11")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IRoutePolicy
    {
        ConnectionProfile ConnectionProfile { get; }
        global::Windows.Networking.HostName HostName { get; }
        global::Windows.Networking.DomainNameType HostNameType { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("36027933-A18E-4DB5-A697-F58FA7364E44")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IRoutePolicyFactory
    {
        RoutePolicy CreateRoutePolicy(ConnectionProfile connectionProfile, global::Windows.Networking.HostName hostName, global::Windows.Networking.DomainNameType type);
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("562098CB-B35A-4BF1-A884-B7557E88FF86")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IWlanConnectionProfileDetails
    {
        string GetConnectedSsid();
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("0E4DA8FE-835F-4DF3-82FD-DF556EBC09EF")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(WwanContract), 65536u)]
    internal interface IWwanConnectionProfileDetails
    {
        WwanNetworkRegistrationState GetNetworkRegistrationState();
        WwanDataClass GetCurrentDataClass();
        string AccessPointName { get; }
        string HomeProviderId { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("7A754EDE-A1ED-48B2-8E92-B460033D52E2")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(WwanContract), 131072u)]
    internal interface IWwanConnectionProfileDetails2
    {
        WwanNetworkIPKind IPKind { get; }
        global::System.Collections.Generic.IReadOnlyList<Guid> PurposeGuids { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class LanIdentifier : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<LanIdentifier>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<ILanIdentifier> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private ILanIdentifier _default => _defaultLazy.Value;

        public static LanIdentifier FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<LanIdentifier>.FromAbi(thisPtr);
        }

        internal LanIdentifier(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(ILanIdentifier).GetHelperType()));
            _defaultLazy = new Lazy<ILanIdentifier>(() => (ILanIdentifier)new SingleInterfaceOptimizedObject(typeof(ILanIdentifier), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
            };
        }

        public static bool operator ==(LanIdentifier x, LanIdentifier y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(LanIdentifier x, LanIdentifier y) => !(x == y);
        public bool Equals(LanIdentifier other) => this == other;
        public override bool Equals(object obj) => obj is LanIdentifier that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private ILanIdentifier AsInternal(InterfaceTag<ILanIdentifier> _) => _default;

        public LanIdentifierData InfrastructureId => _default.InfrastructureId;

        public Guid NetworkAdapterId => _default.NetworkAdapterId;

        public LanIdentifierData PortId => _default.PortId;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class LanIdentifierData : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<LanIdentifierData>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<ILanIdentifierData> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private ILanIdentifierData _default => _defaultLazy.Value;

        public static LanIdentifierData FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<LanIdentifierData>.FromAbi(thisPtr);
        }

        internal LanIdentifierData(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(ILanIdentifierData).GetHelperType()));
            _defaultLazy = new Lazy<ILanIdentifierData>(() => (ILanIdentifierData)new SingleInterfaceOptimizedObject(typeof(ILanIdentifierData), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
            };
        }

        public static bool operator ==(LanIdentifierData x, LanIdentifierData y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(LanIdentifierData x, LanIdentifierData y) => !(x == y);
        public bool Equals(LanIdentifierData other) => this == other;
        public override bool Equals(object obj) => obj is LanIdentifierData that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private ILanIdentifierData AsInternal(InterfaceTag<ILanIdentifierData> _) => _default;

        public uint Type => _default.Type;

        public global::System.Collections.Generic.IReadOnlyList<byte> Value => _default.Value;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class NetworkAdapter : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<NetworkAdapter>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<INetworkAdapter> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private INetworkAdapter _default => _defaultLazy.Value;

        public static NetworkAdapter FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<NetworkAdapter>.FromAbi(thisPtr);
        }

        internal NetworkAdapter(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(INetworkAdapter).GetHelperType()));
            _defaultLazy = new Lazy<INetworkAdapter>(() => (INetworkAdapter)new SingleInterfaceOptimizedObject(typeof(INetworkAdapter), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
            };
        }

        public static bool operator ==(NetworkAdapter x, NetworkAdapter y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(NetworkAdapter x, NetworkAdapter y) => !(x == y);
        public bool Equals(NetworkAdapter other) => this == other;
        public override bool Equals(object obj) => obj is NetworkAdapter that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private INetworkAdapter AsInternal(InterfaceTag<INetworkAdapter> _) => _default;

        public global::Windows.Foundation.IAsyncOperation<ConnectionProfile> GetConnectedProfileAsync() => _default.GetConnectedProfileAsync();

        public uint IanaInterfaceType => _default.IanaInterfaceType;

        public ulong InboundMaxBitsPerSecond => _default.InboundMaxBitsPerSecond;

        public Guid NetworkAdapterId => _default.NetworkAdapterId;

        public NetworkItem NetworkItem => _default.NetworkItem;

        public ulong OutboundMaxBitsPerSecond => _default.OutboundMaxBitsPerSecond;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum NetworkAuthenticationType : int
    {
        None = unchecked((int)0),
        Unknown = unchecked((int)0x1),
        Open80211 = unchecked((int)0x2),
        SharedKey80211 = unchecked((int)0x3),
        Wpa = unchecked((int)0x4),
        WpaPsk = unchecked((int)0x5),
        WpaNone = unchecked((int)0x6),
        Rsna = unchecked((int)0x7),
        RsnaPsk = unchecked((int)0x8),
        Ihv = unchecked((int)0x9),
        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.18362.0")]
        Wpa3 = unchecked((int)0xa),
        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.18362.0")]
        Wpa3Sae = unchecked((int)0xb),
        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.19041.0")]
        Owe = unchecked((int)0xc),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum NetworkConnectivityLevel : int
    {
        None = unchecked((int)0),
        LocalAccess = unchecked((int)0x1),
        ConstrainedInternetAccess = unchecked((int)0x2),
        InternetAccess = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum NetworkCostType : int
    {
        Unknown = unchecked((int)0),
        Unrestricted = unchecked((int)0x1),
        Fixed = unchecked((int)0x2),
        Variable = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum NetworkEncryptionType : int
    {
        None = unchecked((int)0),
        Unknown = unchecked((int)0x1),
        Wep = unchecked((int)0x2),
        Wep40 = unchecked((int)0x3),
        Wep104 = unchecked((int)0x4),
        Tkip = unchecked((int)0x5),
        Ccmp = unchecked((int)0x6),
        WpaUseGroup = unchecked((int)0x7),
        RsnUseGroup = unchecked((int)0x8),
        Ihv = unchecked((int)0x9),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    public static class NetworkInformation
    {

        internal static BaseActivationFactory _factory = new BaseActivationFactory("Windows.Networking.Connectivity", "Windows.Networking.Connectivity.NetworkInformation");
        public static I As<I>() => _factory.AsInterface<I>();

        internal class _INetworkInformationStatics : IWinRTObject
        {
            private IObjectReference _obj;
            public _INetworkInformationStatics()
            {
                _obj = (new BaseActivationFactory("Windows.Networking.Connectivity", "Windows.Networking.Connectivity.NetworkInformation"))._As(GuidGenerator.GetIID(typeof(Windows.Networking.Connectivity.INetworkInformationStatics).GetHelperType()));
            }

            private static readonly _INetworkInformationStatics _instance = new _INetworkInformationStatics();
            internal static INetworkInformationStatics Instance => (INetworkInformationStatics)_instance;

            IObjectReference IWinRTObject.NativeObject => _obj;
            bool IWinRTObject.HasUnwrappableNativeObject => false;
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();
        }

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static global::System.Collections.Generic.IReadOnlyList<ConnectionProfile> GetConnectionProfiles() => _INetworkInformationStatics.Instance.GetConnectionProfiles();

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static ConnectionProfile GetInternetConnectionProfile() => _INetworkInformationStatics.Instance.GetInternetConnectionProfile();

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static global::System.Collections.Generic.IReadOnlyList<LanIdentifier> GetLanIdentifiers() => _INetworkInformationStatics.Instance.GetLanIdentifiers();

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.HostName> GetHostNames() => _INetworkInformationStatics.Instance.GetHostNames();

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static global::Windows.Foundation.IAsyncOperation<ProxyConfiguration> GetProxyConfigurationAsync(global::System.Uri uri) => _INetworkInformationStatics.Instance.GetProxyConfigurationAsync(uri);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.EndpointPair> GetSortedEndpointPairs(global::System.Collections.Generic.IEnumerable<global::Windows.Networking.EndpointPair> destinationList, global::Windows.Networking.HostNameSortOptions sortOptions) => _INetworkInformationStatics.Instance.GetSortedEndpointPairs(destinationList, sortOptions);

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
        public static event NetworkStatusChangedEventHandler NetworkStatusChanged
        {
            add => _INetworkInformationStatics.Instance.NetworkStatusChanged += value;
            remove => _INetworkInformationStatics.Instance.NetworkStatusChanged -= value;
        }

        internal class _INetworkInformationStatics2 : IWinRTObject
        {
            private IObjectReference _obj;
            public _INetworkInformationStatics2()
            {
                _obj = (new BaseActivationFactory("Windows.Networking.Connectivity", "Windows.Networking.Connectivity.NetworkInformation"))._As(GuidGenerator.GetIID(typeof(Windows.Networking.Connectivity.INetworkInformationStatics2).GetHelperType()));
            }

            private static readonly _INetworkInformationStatics2 _instance = new _INetworkInformationStatics2();
            internal static INetworkInformationStatics2 Instance => (INetworkInformationStatics2)_instance;

            IObjectReference IWinRTObject.NativeObject => _obj;
            bool IWinRTObject.HasUnwrappableNativeObject => false;
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();
        }

        public static global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<ConnectionProfile>> FindConnectionProfilesAsync(ConnectionProfileFilter pProfileFilter) => _INetworkInformationStatics2.Instance.FindConnectionProfilesAsync(pProfileFilter);
    }[global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class NetworkItem : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<NetworkItem>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<INetworkItem> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private INetworkItem _default => _defaultLazy.Value;

        public static NetworkItem FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<NetworkItem>.FromAbi(thisPtr);
        }

        internal NetworkItem(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(INetworkItem).GetHelperType()));
            _defaultLazy = new Lazy<INetworkItem>(() => (INetworkItem)new SingleInterfaceOptimizedObject(typeof(INetworkItem), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
            };
        }

        public static bool operator ==(NetworkItem x, NetworkItem y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(NetworkItem x, NetworkItem y) => !(x == y);
        public bool Equals(NetworkItem other) => this == other;
        public override bool Equals(object obj) => obj is NetworkItem that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private INetworkItem AsInternal(InterfaceTag<INetworkItem> _) => _default;

        public NetworkTypes GetNetworkTypes() => _default.GetNetworkTypes();

        public Guid NetworkId => _default.NetworkId;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class NetworkSecuritySettings : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<NetworkSecuritySettings>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<INetworkSecuritySettings> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private INetworkSecuritySettings _default => _defaultLazy.Value;

        public static NetworkSecuritySettings FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<NetworkSecuritySettings>.FromAbi(thisPtr);
        }

        internal NetworkSecuritySettings(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(INetworkSecuritySettings).GetHelperType()));
            _defaultLazy = new Lazy<INetworkSecuritySettings>(() => (INetworkSecuritySettings)new SingleInterfaceOptimizedObject(typeof(INetworkSecuritySettings), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
            };
        }

        public static bool operator ==(NetworkSecuritySettings x, NetworkSecuritySettings y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(NetworkSecuritySettings x, NetworkSecuritySettings y) => !(x == y);
        public bool Equals(NetworkSecuritySettings other) => this == other;
        public override bool Equals(object obj) => obj is NetworkSecuritySettings that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private INetworkSecuritySettings AsInternal(InterfaceTag<INetworkSecuritySettings> _) => _default;

        public NetworkAuthenticationType NetworkAuthenticationType => _default.NetworkAuthenticationType;

        public NetworkEncryptionType NetworkEncryptionType => _default.NetworkEncryptionType;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class NetworkStateChangeEventDetails : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<NetworkStateChangeEventDetails>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<INetworkStateChangeEventDetails> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private INetworkStateChangeEventDetails _default => _defaultLazy.Value;

        public static NetworkStateChangeEventDetails FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<NetworkStateChangeEventDetails>.FromAbi(thisPtr);
        }

        internal NetworkStateChangeEventDetails(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(INetworkStateChangeEventDetails).GetHelperType()));
            _defaultLazy = new Lazy<INetworkStateChangeEventDetails>(() => (INetworkStateChangeEventDetails)new SingleInterfaceOptimizedObject(typeof(INetworkStateChangeEventDetails), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
                {typeof(INetworkStateChangeEventDetails2), new Lazy<INetworkStateChangeEventDetails2>(() => (INetworkStateChangeEventDetails2)(object)new SingleInterfaceOptimizedObject(typeof(INetworkStateChangeEventDetails2), _inner ?? ((IWinRTObject)this).NativeObject))},
            };
        }

        public static bool operator ==(NetworkStateChangeEventDetails x, NetworkStateChangeEventDetails y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(NetworkStateChangeEventDetails x, NetworkStateChangeEventDetails y) => !(x == y);
        public bool Equals(NetworkStateChangeEventDetails other) => this == other;
        public override bool Equals(object obj) => obj is NetworkStateChangeEventDetails that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private INetworkStateChangeEventDetails AsInternal(InterfaceTag<INetworkStateChangeEventDetails> _) => _default;

        private INetworkStateChangeEventDetails2 AsInternal(InterfaceTag<INetworkStateChangeEventDetails2> _) =>  ((Lazy<INetworkStateChangeEventDetails2>)_lazyInterfaces[typeof(INetworkStateChangeEventDetails2)]).Value;

        public bool HasNewConnectionCost => _default.HasNewConnectionCost;

        public bool HasNewDomainConnectivityLevel => _default.HasNewDomainConnectivityLevel;

        public bool HasNewHostNameList => _default.HasNewHostNameList;

        public bool HasNewInternetConnectionProfile => _default.HasNewInternetConnectionProfile;

        public bool HasNewNetworkConnectivityLevel => _default.HasNewNetworkConnectivityLevel;

        public bool HasNewTetheringClientCount => AsInternal(new InterfaceTag<INetworkStateChangeEventDetails2>()).HasNewTetheringClientCount;

        public bool HasNewTetheringOperationalState => AsInternal(new InterfaceTag<INetworkStateChangeEventDetails2>()).HasNewTetheringOperationalState;

        public bool HasNewWwanRegistrationState => _default.HasNewWwanRegistrationState;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    public delegate void NetworkStatusChangedEventHandler(object sender);
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum NetworkTypes : uint
    {
        None = unchecked((uint)0),
        Internet = unchecked((uint)0x1),
        PrivateNetwork = unchecked((uint)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class NetworkUsage : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<NetworkUsage>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<INetworkUsage> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private INetworkUsage _default => _defaultLazy.Value;

        public static NetworkUsage FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<NetworkUsage>.FromAbi(thisPtr);
        }

        internal NetworkUsage(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(INetworkUsage).GetHelperType()));
            _defaultLazy = new Lazy<INetworkUsage>(() => (INetworkUsage)new SingleInterfaceOptimizedObject(typeof(INetworkUsage), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
            };
        }

        public static bool operator ==(NetworkUsage x, NetworkUsage y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(NetworkUsage x, NetworkUsage y) => !(x == y);
        public bool Equals(NetworkUsage other) => this == other;
        public override bool Equals(object obj) => obj is NetworkUsage that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private INetworkUsage AsInternal(InterfaceTag<INetworkUsage> _) => _default;

        public ulong BytesReceived => _default.BytesReceived;

        public ulong BytesSent => _default.BytesSent;

        public global::System.TimeSpan ConnectionDuration => _default.ConnectionDuration;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public struct NetworkUsageStates: IEquatable<NetworkUsageStates>
    {
        public TriStates Roaming;
        public TriStates Shared;

        public NetworkUsageStates(TriStates _Roaming, TriStates _Shared)
        {
            Roaming = _Roaming; Shared = _Shared; 
        }

        public static bool operator ==(NetworkUsageStates x, NetworkUsageStates y) => x.Roaming == y.Roaming && x.Shared == y.Shared;
        public static bool operator !=(NetworkUsageStates x, NetworkUsageStates y) => !(x == y);
        public bool Equals(NetworkUsageStates other) => this == other;
        public override bool Equals(object obj) => obj is NetworkUsageStates that && this == that;
        public override int GetHashCode() => Roaming.GetHashCode() ^ Shared.GetHashCode();
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 327680u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.16299.0")]
    public sealed class ProviderNetworkUsage : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ProviderNetworkUsage>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<IProviderNetworkUsage> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private IProviderNetworkUsage _default => _defaultLazy.Value;

        public static ProviderNetworkUsage FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ProviderNetworkUsage>.FromAbi(thisPtr);
        }

        internal ProviderNetworkUsage(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(IProviderNetworkUsage).GetHelperType()));
            _defaultLazy = new Lazy<IProviderNetworkUsage>(() => (IProviderNetworkUsage)new SingleInterfaceOptimizedObject(typeof(IProviderNetworkUsage), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
            };
        }

        public static bool operator ==(ProviderNetworkUsage x, ProviderNetworkUsage y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ProviderNetworkUsage x, ProviderNetworkUsage y) => !(x == y);
        public bool Equals(ProviderNetworkUsage other) => this == other;
        public override bool Equals(object obj) => obj is ProviderNetworkUsage that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private IProviderNetworkUsage AsInternal(InterfaceTag<IProviderNetworkUsage> _) => _default;

        public ulong BytesReceived => _default.BytesReceived;

        public ulong BytesSent => _default.BytesSent;

        public string ProviderId => _default.ProviderId;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class ProxyConfiguration : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<ProxyConfiguration>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<IProxyConfiguration> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private IProxyConfiguration _default => _defaultLazy.Value;

        public static ProxyConfiguration FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<ProxyConfiguration>.FromAbi(thisPtr);
        }

        internal ProxyConfiguration(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(IProxyConfiguration).GetHelperType()));
            _defaultLazy = new Lazy<IProxyConfiguration>(() => (IProxyConfiguration)new SingleInterfaceOptimizedObject(typeof(IProxyConfiguration), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
            };
        }

        public static bool operator ==(ProxyConfiguration x, ProxyConfiguration y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(ProxyConfiguration x, ProxyConfiguration y) => !(x == y);
        public bool Equals(ProxyConfiguration other) => this == other;
        public override bool Equals(object obj) => obj is ProxyConfiguration that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private IProxyConfiguration AsInternal(InterfaceTag<IProxyConfiguration> _) => _default;

        public bool CanConnectDirectly => _default.CanConnectDirectly;

        public global::System.Collections.Generic.IReadOnlyList<global::System.Uri> ProxyUris => _default.ProxyUris;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum RoamingStates : uint
    {
        None = unchecked((uint)0),
        NotRoaming = unchecked((uint)0x1),
        Roaming = unchecked((uint)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class RoutePolicy : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<RoutePolicy>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<IRoutePolicy> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private IRoutePolicy _default => _defaultLazy.Value;

        internal class _IRoutePolicyFactory : IWinRTObject
        {
            private IObjectReference _obj;
            private IntPtr ThisPtr => _obj.ThisPtr;
            public _IRoutePolicyFactory()
            {
                _obj = ActivationFactory<RoutePolicy>.As(GuidGenerator.GetIID(typeof(Windows.Networking.Connectivity.IRoutePolicyFactory).GetHelperType()));
            }

            private static WeakLazy<_IRoutePolicyFactory> _instance = new WeakLazy<_IRoutePolicyFactory>();
            internal static _IRoutePolicyFactory Instance => _instance.Value;

            IObjectReference IWinRTObject.NativeObject => _obj;
            bool IWinRTObject.HasUnwrappableNativeObject => false;
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();


            public unsafe IntPtr CreateRoutePolicy(ConnectionProfile connectionProfile, global::Windows.Networking.HostName hostName, global::Windows.Networking.DomainNameType type)
            {
                IObjectReference __connectionProfile = default;
                IObjectReference __hostName = default;
                IntPtr __retval = default;
                try
                {
                    __connectionProfile = global::ABI.Windows.Networking.Connectivity.ConnectionProfile.CreateMarshaler(connectionProfile);
                    __hostName = global::ABI.Windows.Networking.HostName.CreateMarshaler(hostName);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Windows.Networking.DomainNameType, out IntPtr, int>**)ThisPtr)[6](ThisPtr, global::ABI.Windows.Networking.Connectivity.ConnectionProfile.GetAbi(__connectionProfile), global::ABI.Windows.Networking.HostName.GetAbi(__hostName), type, out __retval));
                    return __retval;
                }
                finally
                {
                    global::ABI.Windows.Networking.Connectivity.ConnectionProfile.DisposeMarshaler(__connectionProfile);
                    global::ABI.Windows.Networking.HostName.DisposeMarshaler(__hostName);
                }
            }

        }

        public RoutePolicy(ConnectionProfile connectionProfile, global::Windows.Networking.HostName hostName, global::Windows.Networking.DomainNameType type) : this(((Func<IObjectReference>)(() => {
            IntPtr ptr = (_IRoutePolicyFactory.Instance.CreateRoutePolicy(connectionProfile, hostName, type));
            try
            {
                return (ComWrappersSupport.GetObjectReferenceForInterface(ptr));
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(ptr);
            }
        }))())
        {
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);
        }

        public static RoutePolicy FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<RoutePolicy>.FromAbi(thisPtr);
        }

        internal RoutePolicy(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(IRoutePolicy).GetHelperType()));
            _defaultLazy = new Lazy<IRoutePolicy>(() => (IRoutePolicy)new SingleInterfaceOptimizedObject(typeof(IRoutePolicy), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
            };
        }

        public static bool operator ==(RoutePolicy x, RoutePolicy y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(RoutePolicy x, RoutePolicy y) => !(x == y);
        public bool Equals(RoutePolicy other) => this == other;
        public override bool Equals(object obj) => obj is RoutePolicy that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private IRoutePolicy AsInternal(InterfaceTag<IRoutePolicy> _) => _default;

        public ConnectionProfile ConnectionProfile => _default.ConnectionProfile;

        public global::Windows.Networking.HostName HostName => _default.HostName;

        public global::Windows.Networking.DomainNameType HostNameType => _default.HostNameType;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum TriStates : int
    {
        DoNotCare = unchecked((int)0),
        No = unchecked((int)0x1),
        Yes = unchecked((int)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class WlanConnectionProfileDetails : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<WlanConnectionProfileDetails>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<IWlanConnectionProfileDetails> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private IWlanConnectionProfileDetails _default => _defaultLazy.Value;

        public static WlanConnectionProfileDetails FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<WlanConnectionProfileDetails>.FromAbi(thisPtr);
        }

        internal WlanConnectionProfileDetails(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(IWlanConnectionProfileDetails).GetHelperType()));
            _defaultLazy = new Lazy<IWlanConnectionProfileDetails>(() => (IWlanConnectionProfileDetails)new SingleInterfaceOptimizedObject(typeof(IWlanConnectionProfileDetails), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
            };
        }

        public static bool operator ==(WlanConnectionProfileDetails x, WlanConnectionProfileDetails y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(WlanConnectionProfileDetails x, WlanConnectionProfileDetails y) => !(x == y);
        public bool Equals(WlanConnectionProfileDetails other) => this == other;
        public override bool Equals(object obj) => obj is WlanConnectionProfileDetails that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private IWlanConnectionProfileDetails AsInternal(InterfaceTag<IWlanConnectionProfileDetails> _) => _default;

        public string GetConnectedSsid() => _default.GetConnectedSsid();

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(WwanContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class WwanConnectionProfileDetails : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<WwanConnectionProfileDetails>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<IWwanConnectionProfileDetails> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private IWwanConnectionProfileDetails _default => _defaultLazy.Value;

        public static WwanConnectionProfileDetails FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<WwanConnectionProfileDetails>.FromAbi(thisPtr);
        }

        internal WwanConnectionProfileDetails(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(IWwanConnectionProfileDetails).GetHelperType()));
            _defaultLazy = new Lazy<IWwanConnectionProfileDetails>(() => (IWwanConnectionProfileDetails)new SingleInterfaceOptimizedObject(typeof(IWwanConnectionProfileDetails), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
                {typeof(IWwanConnectionProfileDetails2), new Lazy<IWwanConnectionProfileDetails2>(() => (IWwanConnectionProfileDetails2)(object)new SingleInterfaceOptimizedObject(typeof(IWwanConnectionProfileDetails2), _inner ?? ((IWinRTObject)this).NativeObject))},
            };
        }

        public static bool operator ==(WwanConnectionProfileDetails x, WwanConnectionProfileDetails y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(WwanConnectionProfileDetails x, WwanConnectionProfileDetails y) => !(x == y);
        public bool Equals(WwanConnectionProfileDetails other) => this == other;
        public override bool Equals(object obj) => obj is WwanConnectionProfileDetails that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private IWwanConnectionProfileDetails AsInternal(InterfaceTag<IWwanConnectionProfileDetails> _) => _default;

        public WwanNetworkRegistrationState GetNetworkRegistrationState() => _default.GetNetworkRegistrationState();

        public WwanDataClass GetCurrentDataClass() => _default.GetCurrentDataClass();

        private IWwanConnectionProfileDetails2 AsInternal(InterfaceTag<IWwanConnectionProfileDetails2> _) =>  ((Lazy<IWwanConnectionProfileDetails2>)_lazyInterfaces[typeof(IWwanConnectionProfileDetails2)]).Value;

        public string AccessPointName => _default.AccessPointName;

        public string HomeProviderId => _default.HomeProviderId;

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.17134.0")]
        public WwanNetworkIPKind IPKind => AsInternal(new InterfaceTag<IWwanConnectionProfileDetails2>()).IPKind;

        [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.17134.0")]
        public global::System.Collections.Generic.IReadOnlyList<Guid> PurposeGuids => AsInternal(new InterfaceTag<IWwanConnectionProfileDetails2>()).PurposeGuids;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [Windows.Foundation.Metadata.ContractVersion(131072u)]
    public enum WwanContract
    {
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(WwanContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum WwanDataClass : uint
    {
        None = unchecked((uint)0),
        Gprs = unchecked((uint)0x1),
        Edge = unchecked((uint)0x2),
        Umts = unchecked((uint)0x4),
        Hsdpa = unchecked((uint)0x8),
        Hsupa = unchecked((uint)0x10),
        LteAdvanced = unchecked((uint)0x20),
        Cdma1xRtt = unchecked((uint)0x10000),
        Cdma1xEvdo = unchecked((uint)0x20000),
        Cdma1xEvdoRevA = unchecked((uint)0x40000),
        Cdma1xEvdv = unchecked((uint)0x80000),
        Cdma3xRtt = unchecked((uint)0x100000),
        Cdma1xEvdoRevB = unchecked((uint)0x200000),
        CdmaUmb = unchecked((uint)0x400000),
        Custom = unchecked((uint)0x80000000),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(WwanContract), 131072u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.17134.0")]
    public enum WwanNetworkIPKind : int
    {
        None = unchecked((int)0),
        Ipv4 = unchecked((int)0x1),
        Ipv6 = unchecked((int)0x2),
        Ipv4v6 = unchecked((int)0x3),
        Ipv4v6v4Xlat = unchecked((int)0x4),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(WwanContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum WwanNetworkRegistrationState : int
    {
        None = unchecked((int)0),
        Deregistered = unchecked((int)0x1),
        Searching = unchecked((int)0x2),
        Home = unchecked((int)0x3),
        Roaming = unchecked((int)0x4),
        Partner = unchecked((int)0x5),
        Denied = unchecked((int)0x6),
    }
}

#pragma warning disable CA1416
namespace ABI.Windows.Networking.Connectivity
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct AttributedNetworkUsage
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.AttributedNetworkUsage obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.AttributedNetworkUsage>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.IAttributedNetworkUsage).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.AttributedNetworkUsage FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.AttributedNetworkUsage.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.AttributedNetworkUsage obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.AttributedNetworkUsage>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.AttributedNetworkUsage[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.AttributedNetworkUsage>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.AttributedNetworkUsage>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.AttributedNetworkUsage[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.AttributedNetworkUsage>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.AttributedNetworkUsage[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.AttributedNetworkUsage>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.AttributedNetworkUsage>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.AttributedNetworkUsage>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct CellularApnContext
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.CellularApnContext obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.CellularApnContext>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.ICellularApnContext).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.CellularApnContext FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.CellularApnContext.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.CellularApnContext obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.CellularApnContext>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.CellularApnContext[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.CellularApnContext>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.CellularApnContext>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.CellularApnContext[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.CellularApnContext>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.CellularApnContext[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.CellularApnContext>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.CellularApnContext>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.CellularApnContext>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ConnectionCost
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.ConnectionCost obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.ConnectionCost>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.IConnectionCost).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.ConnectionCost FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.ConnectionCost.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.ConnectionCost obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionCost>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.ConnectionCost[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionCost>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionCost>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.ConnectionCost[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionCost>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.ConnectionCost[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionCost>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionCost>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionCost>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ConnectionProfile
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.ConnectionProfile obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.ConnectionProfile>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.IConnectionProfile).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.ConnectionProfile FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.ConnectionProfile.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.ConnectionProfile obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionProfile>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.ConnectionProfile[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionProfile>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionProfile>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.ConnectionProfile[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionProfile>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.ConnectionProfile[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionProfile>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionProfile>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionProfile>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ConnectionProfileFilter
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.ConnectionProfileFilter obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.ConnectionProfileFilter>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.ConnectionProfileFilter FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.ConnectionProfileFilter.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.ConnectionProfileFilter obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionProfileFilter>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.ConnectionProfileFilter[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionProfileFilter>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionProfileFilter>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.ConnectionProfileFilter[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionProfileFilter>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.ConnectionProfileFilter[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionProfileFilter>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionProfileFilter>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionProfileFilter>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ConnectionSession
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.ConnectionSession obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.ConnectionSession>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.IConnectionSession).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.ConnectionSession FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.ConnectionSession.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.ConnectionSession obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionSession>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.ConnectionSession[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionSession>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionSession>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.ConnectionSession[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionSession>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.ConnectionSession[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionSession>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionSession>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectionSession>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ConnectivityInterval
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.ConnectivityInterval obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.ConnectivityInterval>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.IConnectivityInterval).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.ConnectivityInterval FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.ConnectivityInterval.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.ConnectivityInterval obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectivityInterval>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.ConnectivityInterval[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectivityInterval>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectivityInterval>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.ConnectivityInterval[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectivityInterval>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.ConnectivityInterval[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectivityInterval>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectivityInterval>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ConnectivityInterval>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DataPlanStatus
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.DataPlanStatus obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.DataPlanStatus>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.IDataPlanStatus).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.DataPlanStatus FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.DataPlanStatus.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.DataPlanStatus obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataPlanStatus>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.DataPlanStatus[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataPlanStatus>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataPlanStatus>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.DataPlanStatus[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataPlanStatus>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.DataPlanStatus[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataPlanStatus>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataPlanStatus>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataPlanStatus>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DataPlanUsage
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.DataPlanUsage obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.DataPlanUsage>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.IDataPlanUsage).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.DataPlanUsage FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.DataPlanUsage.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.DataPlanUsage obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataPlanUsage>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.DataPlanUsage[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataPlanUsage>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataPlanUsage>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.DataPlanUsage[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataPlanUsage>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.DataPlanUsage[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataPlanUsage>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataPlanUsage>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataPlanUsage>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct DataUsage
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.DataUsage obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.DataUsage>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.IDataUsage).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.DataUsage FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.DataUsage.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.DataUsage obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataUsage>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.DataUsage[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataUsage>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataUsage>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.DataUsage[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataUsage>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.DataUsage[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataUsage>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataUsage>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.DataUsage>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [DynamicInterfaceCastableImplementation]
    [Guid("F769B039-ECA2-45EB-ADE1-B0368B756C49")]
    internal unsafe interface IAttributedNetworkUsage : global::Windows.Networking.Connectivity.IAttributedNetworkUsage
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IAttributedNetworkUsage()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IAttributedNetworkUsage), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 5);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_BytesSent_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_BytesReceived_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_AttributionId_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_get_AttributionName_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_get_AttributionThumbnail_4;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_AttributionId_2(IntPtr thisPtr, IntPtr* value)
        {
            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IAttributedNetworkUsage>(thisPtr).AttributionId;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_AttributionName_3(IntPtr thisPtr, IntPtr* value)
        {
            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IAttributedNetworkUsage>(thisPtr).AttributionName;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_AttributionThumbnail_4(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Storage.Streams.IRandomAccessStreamReference __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IAttributedNetworkUsage>(thisPtr).AttributionThumbnail;
                *value = MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStreamReference>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_BytesReceived_1(IntPtr thisPtr, ulong* value)
        {
            ulong __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IAttributedNetworkUsage>(thisPtr).BytesReceived;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_BytesSent_0(IntPtr thisPtr, ulong* value)
        {
            ulong __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IAttributedNetworkUsage>(thisPtr).BytesSent;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe string global::Windows.Networking.Connectivity.IAttributedNetworkUsage.AttributionId
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IAttributedNetworkUsage).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[8](ThisPtr, out __retval));
                    return MarshalString.FromAbi(__retval);
                }
                finally
                {
                    MarshalString.DisposeAbi(__retval);
                }
            }
        }

        unsafe string global::Windows.Networking.Connectivity.IAttributedNetworkUsage.AttributionName
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IAttributedNetworkUsage).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[9](ThisPtr, out __retval));
                    return MarshalString.FromAbi(__retval);
                }
                finally
                {
                    MarshalString.DisposeAbi(__retval);
                }
            }
        }

        unsafe global::Windows.Storage.Streams.IRandomAccessStreamReference global::Windows.Networking.Connectivity.IAttributedNetworkUsage.AttributionThumbnail
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IAttributedNetworkUsage).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[10](ThisPtr, out __retval));
                    return MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStreamReference>.FromAbi(__retval);
                }
                finally
                {
                    MarshalInterface<global::Windows.Storage.Streams.IRandomAccessStreamReference>.DisposeAbi(__retval);
                }
            }
        }

        unsafe ulong global::Windows.Networking.Connectivity.IAttributedNetworkUsage.BytesReceived
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IAttributedNetworkUsage).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                ulong __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out ulong, int>**)ThisPtr)[7](ThisPtr, out __retval));
                return __retval;
            }
        }

        unsafe ulong global::Windows.Networking.Connectivity.IAttributedNetworkUsage.BytesSent
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IAttributedNetworkUsage).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                ulong __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out ulong, int>**)ThisPtr)[6](ThisPtr, out __retval));
                return __retval;
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("6FA529F4-EFFD-4542-9AB2-705BBF94943A")]
    internal unsafe interface ICellularApnContext : global::Windows.Networking.Connectivity.ICellularApnContext
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe ICellularApnContext()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ICellularApnContext), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 12);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_ProviderId_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_put_ProviderId_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_AccessPointName_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_put_AccessPointName_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_get_UserName_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_put_UserName_5;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[12] = &Do_Abi_get_Password_6;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[13] = &Do_Abi_put_Password_7;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[14] = &Do_Abi_get_IsCompressionEnabled_8;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte, int>*)AbiToProjectionVftablePtr)[15] = &Do_Abi_put_IsCompressionEnabled_9;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Networking.Connectivity.CellularApnAuthenticationType*, int>*)AbiToProjectionVftablePtr)[16] = &Do_Abi_get_AuthenticationType_10;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Networking.Connectivity.CellularApnAuthenticationType, int>*)AbiToProjectionVftablePtr)[17] = &Do_Abi_put_AuthenticationType_11;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_AccessPointName_3(IntPtr thisPtr, IntPtr value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.ICellularApnContext>(thisPtr).AccessPointName = MarshalString.FromAbi(value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_AccessPointName_2(IntPtr thisPtr, IntPtr* value)
        {
            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.ICellularApnContext>(thisPtr).AccessPointName;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_AuthenticationType_11(IntPtr thisPtr, global::Windows.Networking.Connectivity.CellularApnAuthenticationType value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.ICellularApnContext>(thisPtr).AuthenticationType = value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_AuthenticationType_10(IntPtr thisPtr, global::Windows.Networking.Connectivity.CellularApnAuthenticationType* value)
        {
            global::Windows.Networking.Connectivity.CellularApnAuthenticationType __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.ICellularApnContext>(thisPtr).AuthenticationType;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_IsCompressionEnabled_9(IntPtr thisPtr, byte value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.ICellularApnContext>(thisPtr).IsCompressionEnabled = value != 0;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsCompressionEnabled_8(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.ICellularApnContext>(thisPtr).IsCompressionEnabled;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_Password_7(IntPtr thisPtr, IntPtr value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.ICellularApnContext>(thisPtr).Password = MarshalString.FromAbi(value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_Password_6(IntPtr thisPtr, IntPtr* value)
        {
            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.ICellularApnContext>(thisPtr).Password;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_ProviderId_1(IntPtr thisPtr, IntPtr value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.ICellularApnContext>(thisPtr).ProviderId = MarshalString.FromAbi(value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_ProviderId_0(IntPtr thisPtr, IntPtr* value)
        {
            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.ICellularApnContext>(thisPtr).ProviderId;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_UserName_5(IntPtr thisPtr, IntPtr value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.ICellularApnContext>(thisPtr).UserName = MarshalString.FromAbi(value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_UserName_4(IntPtr thisPtr, IntPtr* value)
        {
            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.ICellularApnContext>(thisPtr).UserName;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe string global::Windows.Networking.Connectivity.ICellularApnContext.AccessPointName
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.ICellularApnContext).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[8](ThisPtr, out __retval));
                    return MarshalString.FromAbi(__retval);
                }
                finally
                {
                    MarshalString.DisposeAbi(__retval);
                }
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.ICellularApnContext).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                MarshalString __value = default;
                try
                {
                    __value = MarshalString.CreateMarshaler(value);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(__value)));
                }
                finally
                {
                    MarshalString.DisposeMarshaler(__value);
                }
            }
        }

        unsafe global::Windows.Networking.Connectivity.CellularApnAuthenticationType global::Windows.Networking.Connectivity.ICellularApnContext.AuthenticationType
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.ICellularApnContext).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                global::Windows.Networking.Connectivity.CellularApnAuthenticationType __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out global::Windows.Networking.Connectivity.CellularApnAuthenticationType, int>**)ThisPtr)[16](ThisPtr, out __retval));
                return __retval;
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.ICellularApnContext).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Networking.Connectivity.CellularApnAuthenticationType, int>**)ThisPtr)[17](ThisPtr, value));
            }
        }

        unsafe bool global::Windows.Networking.Connectivity.ICellularApnContext.IsCompressionEnabled
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.ICellularApnContext).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[14](ThisPtr, out __retval));
                return __retval != 0;
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.ICellularApnContext).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[15](ThisPtr, (byte)(value ? 1 : 0)));
            }
        }

        unsafe string global::Windows.Networking.Connectivity.ICellularApnContext.Password
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.ICellularApnContext).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[12](ThisPtr, out __retval));
                    return MarshalString.FromAbi(__retval);
                }
                finally
                {
                    MarshalString.DisposeAbi(__retval);
                }
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.ICellularApnContext).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                MarshalString __value = default;
                try
                {
                    __value = MarshalString.CreateMarshaler(value);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalString.GetAbi(__value)));
                }
                finally
                {
                    MarshalString.DisposeMarshaler(__value);
                }
            }
        }

        unsafe string global::Windows.Networking.Connectivity.ICellularApnContext.ProviderId
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.ICellularApnContext).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, out __retval));
                    return MarshalString.FromAbi(__retval);
                }
                finally
                {
                    MarshalString.DisposeAbi(__retval);
                }
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.ICellularApnContext).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                MarshalString __value = default;
                try
                {
                    __value = MarshalString.CreateMarshaler(value);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(__value)));
                }
                finally
                {
                    MarshalString.DisposeMarshaler(__value);
                }
            }
        }

        unsafe string global::Windows.Networking.Connectivity.ICellularApnContext.UserName
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.ICellularApnContext).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[10](ThisPtr, out __retval));
                    return MarshalString.FromAbi(__retval);
                }
                finally
                {
                    MarshalString.DisposeAbi(__retval);
                }
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.ICellularApnContext).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                MarshalString __value = default;
                try
                {
                    __value = MarshalString.CreateMarshaler(value);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalString.GetAbi(__value)));
                }
                finally
                {
                    MarshalString.DisposeMarshaler(__value);
                }
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("76B0EB1A-AC49-4350-B1E5-DC4763BC69C7")]
    internal unsafe interface ICellularApnContext2 : global::Windows.Networking.Connectivity.ICellularApnContext2
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe ICellularApnContext2()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ICellularApnContext2), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_ProfileName_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_put_ProfileName_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_ProfileName_1(IntPtr thisPtr, IntPtr value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.ICellularApnContext2>(thisPtr).ProfileName = MarshalString.FromAbi(value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_ProfileName_0(IntPtr thisPtr, IntPtr* value)
        {
            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.ICellularApnContext2>(thisPtr).ProfileName;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe string global::Windows.Networking.Connectivity.ICellularApnContext2.ProfileName
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.ICellularApnContext2).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, out __retval));
                    return MarshalString.FromAbi(__retval);
                }
                finally
                {
                    MarshalString.DisposeAbi(__retval);
                }
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.ICellularApnContext2).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                MarshalString __value = default;
                try
                {
                    __value = MarshalString.CreateMarshaler(value);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, MarshalString.GetAbi(__value)));
                }
                finally
                {
                    MarshalString.DisposeMarshaler(__value);
                }
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("BAD7D829-3416-4B10-A202-BAC0B075BDAE")]
    internal unsafe interface IConnectionCost : global::Windows.Networking.Connectivity.IConnectionCost
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IConnectionCost()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IConnectionCost), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 4);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Networking.Connectivity.NetworkCostType*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_NetworkCostType_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_Roaming_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_OverDataLimit_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_get_ApproachingDataLimit_3;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_ApproachingDataLimit_3(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionCost>(thisPtr).ApproachingDataLimit;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_NetworkCostType_0(IntPtr thisPtr, global::Windows.Networking.Connectivity.NetworkCostType* value)
        {
            global::Windows.Networking.Connectivity.NetworkCostType __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionCost>(thisPtr).NetworkCostType;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_OverDataLimit_2(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionCost>(thisPtr).OverDataLimit;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_Roaming_1(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionCost>(thisPtr).Roaming;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe bool global::Windows.Networking.Connectivity.IConnectionCost.ApproachingDataLimit
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionCost).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[9](ThisPtr, out __retval));
                return __retval != 0;
            }
        }

        unsafe global::Windows.Networking.Connectivity.NetworkCostType global::Windows.Networking.Connectivity.IConnectionCost.NetworkCostType
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionCost).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                global::Windows.Networking.Connectivity.NetworkCostType __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out global::Windows.Networking.Connectivity.NetworkCostType, int>**)ThisPtr)[6](ThisPtr, out __retval));
                return __retval;
            }
        }

        unsafe bool global::Windows.Networking.Connectivity.IConnectionCost.OverDataLimit
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionCost).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[8](ThisPtr, out __retval));
                return __retval != 0;
            }
        }

        unsafe bool global::Windows.Networking.Connectivity.IConnectionCost.Roaming
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionCost).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[7](ThisPtr, out __retval));
                return __retval != 0;
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("8E113A05-E209-4549-BB25-5E0DB691CB05")]
    internal unsafe interface IConnectionCost2 : global::Windows.Networking.Connectivity.IConnectionCost2
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IConnectionCost2()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IConnectionCost2), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_BackgroundDataUsageRestricted_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_BackgroundDataUsageRestricted_0(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionCost2>(thisPtr).BackgroundDataUsageRestricted;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe bool global::Windows.Networking.Connectivity.IConnectionCost2.BackgroundDataUsageRestricted
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionCost2).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[6](ThisPtr, out __retval));
                return __retval != 0;
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("71BA143C-598E-49D0-84EB-8FEBAEDCC195")]
    internal unsafe interface IConnectionProfile : global::Windows.Networking.Connectivity.IConnectionProfile
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IConnectionProfile()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IConnectionProfile), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 9);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_ProfileName_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Networking.Connectivity.NetworkConnectivityLevel*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_GetNetworkConnectivityLevel_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_GetNetworkNames_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_GetConnectionCost_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_GetDataPlanStatus_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_get_NetworkAdapter_5;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.DateTimeOffset, global::ABI.System.DateTimeOffset, IntPtr*, int>*)AbiToProjectionVftablePtr)[12] = &Do_Abi_GetLocalUsage_6;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.DateTimeOffset, global::ABI.System.DateTimeOffset, global::Windows.Networking.Connectivity.RoamingStates, IntPtr*, int>*)AbiToProjectionVftablePtr)[13] = &Do_Abi_GetLocalUsage_7;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[14] = &Do_Abi_get_NetworkSecuritySettings_8;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetNetworkConnectivityLevel_1(IntPtr thisPtr, global::Windows.Networking.Connectivity.NetworkConnectivityLevel* value)
        {
            global::Windows.Networking.Connectivity.NetworkConnectivityLevel __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile>(thisPtr).GetNetworkConnectivityLevel();
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetNetworkNames_2(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Collections.Generic.IReadOnlyList<string> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile>(thisPtr).GetNetworkNames();
                *value = MarshalInterface<global::System.Collections.Generic.IReadOnlyList<string>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetConnectionCost_3(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Networking.Connectivity.ConnectionCost __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile>(thisPtr).GetConnectionCost();
                *value = global::ABI.Windows.Networking.Connectivity.ConnectionCost.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetDataPlanStatus_4(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Networking.Connectivity.DataPlanStatus __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile>(thisPtr).GetDataPlanStatus();
                *value = global::ABI.Windows.Networking.Connectivity.DataPlanStatus.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetLocalUsage_6(IntPtr thisPtr, global::ABI.System.DateTimeOffset StartTime, global::ABI.System.DateTimeOffset EndTime, IntPtr* value)
        {
            global::Windows.Networking.Connectivity.DataUsage __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile>(thisPtr).GetLocalUsage(global::ABI.System.DateTimeOffset.FromAbi(StartTime), global::ABI.System.DateTimeOffset.FromAbi(EndTime));
                *value = global::ABI.Windows.Networking.Connectivity.DataUsage.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetLocalUsage_7(IntPtr thisPtr, global::ABI.System.DateTimeOffset StartTime, global::ABI.System.DateTimeOffset EndTime, global::Windows.Networking.Connectivity.RoamingStates States, IntPtr* value)
        {
            global::Windows.Networking.Connectivity.DataUsage __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile>(thisPtr).GetLocalUsage(global::ABI.System.DateTimeOffset.FromAbi(StartTime), global::ABI.System.DateTimeOffset.FromAbi(EndTime), States);
                *value = global::ABI.Windows.Networking.Connectivity.DataUsage.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_NetworkAdapter_5(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Networking.Connectivity.NetworkAdapter __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile>(thisPtr).NetworkAdapter;
                *value = global::ABI.Windows.Networking.Connectivity.NetworkAdapter.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_NetworkSecuritySettings_8(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Networking.Connectivity.NetworkSecuritySettings __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile>(thisPtr).NetworkSecuritySettings;
                *value = global::ABI.Windows.Networking.Connectivity.NetworkSecuritySettings.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_ProfileName_0(IntPtr thisPtr, IntPtr* value)
        {
            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile>(thisPtr).ProfileName;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Networking.Connectivity.NetworkConnectivityLevel global::Windows.Networking.Connectivity.IConnectionProfile.GetNetworkConnectivityLevel()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Networking.Connectivity.NetworkConnectivityLevel __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out global::Windows.Networking.Connectivity.NetworkConnectivityLevel, int>**)ThisPtr)[7](ThisPtr, out __retval));
            return __retval;
        }

        unsafe global::System.Collections.Generic.IReadOnlyList<string> global::Windows.Networking.Connectivity.IConnectionProfile.GetNetworkNames()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[8](ThisPtr, out __retval));
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<string>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<string>>.DisposeAbi(__retval);
            }
        }

        unsafe global::Windows.Networking.Connectivity.ConnectionCost global::Windows.Networking.Connectivity.IConnectionProfile.GetConnectionCost()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[9](ThisPtr, out __retval));
                return global::ABI.Windows.Networking.Connectivity.ConnectionCost.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Networking.Connectivity.ConnectionCost.DisposeAbi(__retval);
            }
        }

        unsafe global::Windows.Networking.Connectivity.DataPlanStatus global::Windows.Networking.Connectivity.IConnectionProfile.GetDataPlanStatus()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[10](ThisPtr, out __retval));
                return global::ABI.Windows.Networking.Connectivity.DataPlanStatus.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Networking.Connectivity.DataPlanStatus.DisposeAbi(__retval);
            }
        }

        unsafe global::Windows.Networking.Connectivity.DataUsage global::Windows.Networking.Connectivity.IConnectionProfile.GetLocalUsage(global::System.DateTimeOffset StartTime, global::System.DateTimeOffset EndTime)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.DateTimeOffset.Marshaler __StartTime = default;
            global::ABI.System.DateTimeOffset.Marshaler __EndTime = default;
            IntPtr __retval = default;
            try
            {
                __StartTime = global::ABI.System.DateTimeOffset.CreateMarshaler(StartTime);
                __EndTime = global::ABI.System.DateTimeOffset.CreateMarshaler(EndTime);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.DateTimeOffset, global::ABI.System.DateTimeOffset, out IntPtr, int>**)ThisPtr)[12](ThisPtr, global::ABI.System.DateTimeOffset.GetAbi(__StartTime), global::ABI.System.DateTimeOffset.GetAbi(__EndTime), out __retval));
                return global::ABI.Windows.Networking.Connectivity.DataUsage.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.DateTimeOffset.DisposeMarshaler(__StartTime);
                global::ABI.System.DateTimeOffset.DisposeMarshaler(__EndTime);
                global::ABI.Windows.Networking.Connectivity.DataUsage.DisposeAbi(__retval);
            }
        }

        unsafe global::Windows.Networking.Connectivity.DataUsage global::Windows.Networking.Connectivity.IConnectionProfile.GetLocalUsage(global::System.DateTimeOffset StartTime, global::System.DateTimeOffset EndTime, global::Windows.Networking.Connectivity.RoamingStates States)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.DateTimeOffset.Marshaler __StartTime = default;
            global::ABI.System.DateTimeOffset.Marshaler __EndTime = default;
            IntPtr __retval = default;
            try
            {
                __StartTime = global::ABI.System.DateTimeOffset.CreateMarshaler(StartTime);
                __EndTime = global::ABI.System.DateTimeOffset.CreateMarshaler(EndTime);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.DateTimeOffset, global::ABI.System.DateTimeOffset, global::Windows.Networking.Connectivity.RoamingStates, out IntPtr, int>**)ThisPtr)[13](ThisPtr, global::ABI.System.DateTimeOffset.GetAbi(__StartTime), global::ABI.System.DateTimeOffset.GetAbi(__EndTime), States, out __retval));
                return global::ABI.Windows.Networking.Connectivity.DataUsage.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.DateTimeOffset.DisposeMarshaler(__StartTime);
                global::ABI.System.DateTimeOffset.DisposeMarshaler(__EndTime);
                global::ABI.Windows.Networking.Connectivity.DataUsage.DisposeAbi(__retval);
            }
        }

        unsafe global::Windows.Networking.Connectivity.NetworkAdapter global::Windows.Networking.Connectivity.IConnectionProfile.NetworkAdapter
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[11](ThisPtr, out __retval));
                    return global::ABI.Windows.Networking.Connectivity.NetworkAdapter.FromAbi(__retval);
                }
                finally
                {
                    global::ABI.Windows.Networking.Connectivity.NetworkAdapter.DisposeAbi(__retval);
                }
            }
        }

        unsafe global::Windows.Networking.Connectivity.NetworkSecuritySettings global::Windows.Networking.Connectivity.IConnectionProfile.NetworkSecuritySettings
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[14](ThisPtr, out __retval));
                    return global::ABI.Windows.Networking.Connectivity.NetworkSecuritySettings.FromAbi(__retval);
                }
                finally
                {
                    global::ABI.Windows.Networking.Connectivity.NetworkSecuritySettings.DisposeAbi(__retval);
                }
            }
        }

        unsafe string global::Windows.Networking.Connectivity.IConnectionProfile.ProfileName
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, out __retval));
                    return MarshalString.FromAbi(__retval);
                }
                finally
                {
                    MarshalString.DisposeAbi(__retval);
                }
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("E2045145-4C9F-400C-9150-7EC7D6E2888A")]
    internal unsafe interface IConnectionProfile2 : global::Windows.Networking.Connectivity.IConnectionProfile2
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IConnectionProfile2()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IConnectionProfile2), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 9);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_IsWwanConnectionProfile_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_IsWlanConnectionProfile_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_WwanConnectionProfileDetails_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_get_WlanConnectionProfileDetails_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_get_ServiceProviderGuid_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_GetSignalBars_5;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Networking.Connectivity.DomainConnectivityLevel*, int>*)AbiToProjectionVftablePtr)[12] = &Do_Abi_GetDomainConnectivityLevel_6;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.DateTimeOffset, global::ABI.System.DateTimeOffset, global::Windows.Networking.Connectivity.DataUsageGranularity, global::Windows.Networking.Connectivity.NetworkUsageStates, IntPtr*, int>*)AbiToProjectionVftablePtr)[13] = &Do_Abi_GetNetworkUsageAsync_7;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.DateTimeOffset, global::ABI.System.DateTimeOffset, global::Windows.Networking.Connectivity.NetworkUsageStates, IntPtr*, int>*)AbiToProjectionVftablePtr)[14] = &Do_Abi_GetConnectivityIntervalsAsync_8;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetSignalBars_5(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Nullable<byte> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile2>(thisPtr).GetSignalBars();
                *value = MarshalInterface<global::System.Nullable<byte>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetDomainConnectivityLevel_6(IntPtr thisPtr, global::Windows.Networking.Connectivity.DomainConnectivityLevel* value)
        {
            global::Windows.Networking.Connectivity.DomainConnectivityLevel __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile2>(thisPtr).GetDomainConnectivityLevel();
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetNetworkUsageAsync_7(IntPtr thisPtr, global::ABI.System.DateTimeOffset startTime, global::ABI.System.DateTimeOffset endTime, global::Windows.Networking.Connectivity.DataUsageGranularity granularity, global::Windows.Networking.Connectivity.NetworkUsageStates states, IntPtr* value)
        {
            global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.NetworkUsage>> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile2>(thisPtr).GetNetworkUsageAsync(global::ABI.System.DateTimeOffset.FromAbi(startTime), global::ABI.System.DateTimeOffset.FromAbi(endTime), granularity, states);
                *value = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.NetworkUsage>>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetConnectivityIntervalsAsync_8(IntPtr thisPtr, global::ABI.System.DateTimeOffset startTime, global::ABI.System.DateTimeOffset endTime, global::Windows.Networking.Connectivity.NetworkUsageStates states, IntPtr* value)
        {
            global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ConnectivityInterval>> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile2>(thisPtr).GetConnectivityIntervalsAsync(global::ABI.System.DateTimeOffset.FromAbi(startTime), global::ABI.System.DateTimeOffset.FromAbi(endTime), states);
                *value = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ConnectivityInterval>>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsWlanConnectionProfile_1(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile2>(thisPtr).IsWlanConnectionProfile;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsWwanConnectionProfile_0(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile2>(thisPtr).IsWwanConnectionProfile;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_ServiceProviderGuid_4(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Nullable<Guid> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile2>(thisPtr).ServiceProviderGuid;
                *value = MarshalInterface<global::System.Nullable<Guid>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_WlanConnectionProfileDetails_3(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Networking.Connectivity.WlanConnectionProfileDetails __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile2>(thisPtr).WlanConnectionProfileDetails;
                *value = global::ABI.Windows.Networking.Connectivity.WlanConnectionProfileDetails.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_WwanConnectionProfileDetails_2(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Networking.Connectivity.WwanConnectionProfileDetails __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile2>(thisPtr).WwanConnectionProfileDetails;
                *value = global::ABI.Windows.Networking.Connectivity.WwanConnectionProfileDetails.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::System.Nullable<byte> global::Windows.Networking.Connectivity.IConnectionProfile2.GetSignalBars()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile2).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[11](ThisPtr, out __retval));
                return MarshalInterface<global::System.Nullable<byte>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Nullable<byte>>.DisposeAbi(__retval);
            }
        }

        unsafe global::Windows.Networking.Connectivity.DomainConnectivityLevel global::Windows.Networking.Connectivity.IConnectionProfile2.GetDomainConnectivityLevel()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile2).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Networking.Connectivity.DomainConnectivityLevel __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out global::Windows.Networking.Connectivity.DomainConnectivityLevel, int>**)ThisPtr)[12](ThisPtr, out __retval));
            return __retval;
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.NetworkUsage>> global::Windows.Networking.Connectivity.IConnectionProfile2.GetNetworkUsageAsync(global::System.DateTimeOffset startTime, global::System.DateTimeOffset endTime, global::Windows.Networking.Connectivity.DataUsageGranularity granularity, global::Windows.Networking.Connectivity.NetworkUsageStates states)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile2).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.DateTimeOffset.Marshaler __startTime = default;
            global::ABI.System.DateTimeOffset.Marshaler __endTime = default;
            IntPtr __retval = default;
            try
            {
                __startTime = global::ABI.System.DateTimeOffset.CreateMarshaler(startTime);
                __endTime = global::ABI.System.DateTimeOffset.CreateMarshaler(endTime);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.DateTimeOffset, global::ABI.System.DateTimeOffset, global::Windows.Networking.Connectivity.DataUsageGranularity, global::Windows.Networking.Connectivity.NetworkUsageStates, out IntPtr, int>**)ThisPtr)[13](ThisPtr, global::ABI.System.DateTimeOffset.GetAbi(__startTime), global::ABI.System.DateTimeOffset.GetAbi(__endTime), granularity, states, out __retval));
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.NetworkUsage>>>.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.DateTimeOffset.DisposeMarshaler(__startTime);
                global::ABI.System.DateTimeOffset.DisposeMarshaler(__endTime);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.NetworkUsage>>>.DisposeAbi(__retval);
            }
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ConnectivityInterval>> global::Windows.Networking.Connectivity.IConnectionProfile2.GetConnectivityIntervalsAsync(global::System.DateTimeOffset startTime, global::System.DateTimeOffset endTime, global::Windows.Networking.Connectivity.NetworkUsageStates states)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile2).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.DateTimeOffset.Marshaler __startTime = default;
            global::ABI.System.DateTimeOffset.Marshaler __endTime = default;
            IntPtr __retval = default;
            try
            {
                __startTime = global::ABI.System.DateTimeOffset.CreateMarshaler(startTime);
                __endTime = global::ABI.System.DateTimeOffset.CreateMarshaler(endTime);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.DateTimeOffset, global::ABI.System.DateTimeOffset, global::Windows.Networking.Connectivity.NetworkUsageStates, out IntPtr, int>**)ThisPtr)[14](ThisPtr, global::ABI.System.DateTimeOffset.GetAbi(__startTime), global::ABI.System.DateTimeOffset.GetAbi(__endTime), states, out __retval));
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ConnectivityInterval>>>.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.DateTimeOffset.DisposeMarshaler(__startTime);
                global::ABI.System.DateTimeOffset.DisposeMarshaler(__endTime);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ConnectivityInterval>>>.DisposeAbi(__retval);
            }
        }

        unsafe bool global::Windows.Networking.Connectivity.IConnectionProfile2.IsWlanConnectionProfile
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile2).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[7](ThisPtr, out __retval));
                return __retval != 0;
            }
        }

        unsafe bool global::Windows.Networking.Connectivity.IConnectionProfile2.IsWwanConnectionProfile
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile2).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[6](ThisPtr, out __retval));
                return __retval != 0;
            }
        }

        unsafe global::System.Nullable<Guid> global::Windows.Networking.Connectivity.IConnectionProfile2.ServiceProviderGuid
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile2).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[10](ThisPtr, out __retval));
                    return MarshalInterface<global::System.Nullable<Guid>>.FromAbi(__retval);
                }
                finally
                {
                    MarshalInterface<global::System.Nullable<Guid>>.DisposeAbi(__retval);
                }
            }
        }

        unsafe global::Windows.Networking.Connectivity.WlanConnectionProfileDetails global::Windows.Networking.Connectivity.IConnectionProfile2.WlanConnectionProfileDetails
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile2).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[9](ThisPtr, out __retval));
                    return global::ABI.Windows.Networking.Connectivity.WlanConnectionProfileDetails.FromAbi(__retval);
                }
                finally
                {
                    global::ABI.Windows.Networking.Connectivity.WlanConnectionProfileDetails.DisposeAbi(__retval);
                }
            }
        }

        unsafe global::Windows.Networking.Connectivity.WwanConnectionProfileDetails global::Windows.Networking.Connectivity.IConnectionProfile2.WwanConnectionProfileDetails
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile2).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[8](ThisPtr, out __retval));
                    return global::ABI.Windows.Networking.Connectivity.WwanConnectionProfileDetails.FromAbi(__retval);
                }
                finally
                {
                    global::ABI.Windows.Networking.Connectivity.WwanConnectionProfileDetails.DisposeAbi(__retval);
                }
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("578C2528-4CD9-4161-8045-201CFD5B115C")]
    internal unsafe interface IConnectionProfile3 : global::Windows.Networking.Connectivity.IConnectionProfile3
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IConnectionProfile3()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IConnectionProfile3), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.DateTimeOffset, global::ABI.System.DateTimeOffset, global::Windows.Networking.Connectivity.NetworkUsageStates, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GetAttributedNetworkUsageAsync_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetAttributedNetworkUsageAsync_0(IntPtr thisPtr, global::ABI.System.DateTimeOffset startTime, global::ABI.System.DateTimeOffset endTime, global::Windows.Networking.Connectivity.NetworkUsageStates states, IntPtr* value)
        {
            global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.AttributedNetworkUsage>> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile3>(thisPtr).GetAttributedNetworkUsageAsync(global::ABI.System.DateTimeOffset.FromAbi(startTime), global::ABI.System.DateTimeOffset.FromAbi(endTime), states);
                *value = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.AttributedNetworkUsage>>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.AttributedNetworkUsage>> global::Windows.Networking.Connectivity.IConnectionProfile3.GetAttributedNetworkUsageAsync(global::System.DateTimeOffset startTime, global::System.DateTimeOffset endTime, global::Windows.Networking.Connectivity.NetworkUsageStates states)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile3).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.DateTimeOffset.Marshaler __startTime = default;
            global::ABI.System.DateTimeOffset.Marshaler __endTime = default;
            IntPtr __retval = default;
            try
            {
                __startTime = global::ABI.System.DateTimeOffset.CreateMarshaler(startTime);
                __endTime = global::ABI.System.DateTimeOffset.CreateMarshaler(endTime);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.DateTimeOffset, global::ABI.System.DateTimeOffset, global::Windows.Networking.Connectivity.NetworkUsageStates, out IntPtr, int>**)ThisPtr)[6](ThisPtr, global::ABI.System.DateTimeOffset.GetAbi(__startTime), global::ABI.System.DateTimeOffset.GetAbi(__endTime), states, out __retval));
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.AttributedNetworkUsage>>>.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.DateTimeOffset.DisposeMarshaler(__startTime);
                global::ABI.System.DateTimeOffset.DisposeMarshaler(__endTime);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.AttributedNetworkUsage>>>.DisposeAbi(__retval);
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("7A2D42CD-81E0-4AE6-ABED-AB9CA13EB714")]
    internal unsafe interface IConnectionProfile4 : global::Windows.Networking.Connectivity.IConnectionProfile4
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IConnectionProfile4()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IConnectionProfile4), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.DateTimeOffset, global::ABI.System.DateTimeOffset, global::Windows.Networking.Connectivity.NetworkUsageStates, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GetProviderNetworkUsageAsync_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetProviderNetworkUsageAsync_0(IntPtr thisPtr, global::ABI.System.DateTimeOffset startTime, global::ABI.System.DateTimeOffset endTime, global::Windows.Networking.Connectivity.NetworkUsageStates states, IntPtr* value)
        {
            global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ProviderNetworkUsage>> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile4>(thisPtr).GetProviderNetworkUsageAsync(global::ABI.System.DateTimeOffset.FromAbi(startTime), global::ABI.System.DateTimeOffset.FromAbi(endTime), states);
                *value = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ProviderNetworkUsage>>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ProviderNetworkUsage>> global::Windows.Networking.Connectivity.IConnectionProfile4.GetProviderNetworkUsageAsync(global::System.DateTimeOffset startTime, global::System.DateTimeOffset endTime, global::Windows.Networking.Connectivity.NetworkUsageStates states)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile4).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            global::ABI.System.DateTimeOffset.Marshaler __startTime = default;
            global::ABI.System.DateTimeOffset.Marshaler __endTime = default;
            IntPtr __retval = default;
            try
            {
                __startTime = global::ABI.System.DateTimeOffset.CreateMarshaler(startTime);
                __endTime = global::ABI.System.DateTimeOffset.CreateMarshaler(endTime);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.DateTimeOffset, global::ABI.System.DateTimeOffset, global::Windows.Networking.Connectivity.NetworkUsageStates, out IntPtr, int>**)ThisPtr)[6](ThisPtr, global::ABI.System.DateTimeOffset.GetAbi(__startTime), global::ABI.System.DateTimeOffset.GetAbi(__endTime), states, out __retval));
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ProviderNetworkUsage>>>.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.DateTimeOffset.DisposeMarshaler(__startTime);
                global::ABI.System.DateTimeOffset.DisposeMarshaler(__endTime);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ProviderNetworkUsage>>>.DisposeAbi(__retval);
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("85361EC7-9C73-4BE0-8F14-578EEC71EE0E")]
    internal unsafe interface IConnectionProfile5 : global::Windows.Networking.Connectivity.IConnectionProfile5
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IConnectionProfile5()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IConnectionProfile5), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_CanDelete_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_TryDeleteAsync_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_TryDeleteAsync_1(IntPtr thisPtr, IntPtr* operation)
        {
            global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ConnectionProfileDeleteStatus> __operation = default;

            *operation = default;

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile5>(thisPtr).TryDeleteAsync();
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ConnectionProfileDeleteStatus>>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_CanDelete_0(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfile5>(thisPtr).CanDelete;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ConnectionProfileDeleteStatus> global::Windows.Networking.Connectivity.IConnectionProfile5.TryDeleteAsync()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile5).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[7](ThisPtr, out __retval));
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ConnectionProfileDeleteStatus>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ConnectionProfileDeleteStatus>>.DisposeAbi(__retval);
            }
        }

        unsafe bool global::Windows.Networking.Connectivity.IConnectionProfile5.CanDelete
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfile5).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[6](ThisPtr, out __retval));
                return __retval != 0;
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("204C7CC8-BD2D-4E8D-A4B3-455EC337388A")]
    internal unsafe interface IConnectionProfileFilter : global::Windows.Networking.Connectivity.IConnectionProfileFilter
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IConnectionProfileFilter()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IConnectionProfileFilter), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 10);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_put_IsConnected_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_IsConnected_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_put_IsWwanConnectionProfile_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_get_IsWwanConnectionProfile_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_put_IsWlanConnectionProfile_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_get_IsWlanConnectionProfile_5;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Networking.Connectivity.NetworkCostType, int>*)AbiToProjectionVftablePtr)[12] = &Do_Abi_put_NetworkCostType_6;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Networking.Connectivity.NetworkCostType*, int>*)AbiToProjectionVftablePtr)[13] = &Do_Abi_get_NetworkCostType_7;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[14] = &Do_Abi_put_ServiceProviderGuid_8;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[15] = &Do_Abi_get_ServiceProviderGuid_9;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_IsConnected_0(IntPtr thisPtr, byte value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfileFilter>(thisPtr).IsConnected = value != 0;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsConnected_1(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfileFilter>(thisPtr).IsConnected;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_IsWlanConnectionProfile_4(IntPtr thisPtr, byte value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfileFilter>(thisPtr).IsWlanConnectionProfile = value != 0;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsWlanConnectionProfile_5(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfileFilter>(thisPtr).IsWlanConnectionProfile;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_IsWwanConnectionProfile_2(IntPtr thisPtr, byte value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfileFilter>(thisPtr).IsWwanConnectionProfile = value != 0;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsWwanConnectionProfile_3(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfileFilter>(thisPtr).IsWwanConnectionProfile;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_NetworkCostType_6(IntPtr thisPtr, global::Windows.Networking.Connectivity.NetworkCostType value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfileFilter>(thisPtr).NetworkCostType = value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_NetworkCostType_7(IntPtr thisPtr, global::Windows.Networking.Connectivity.NetworkCostType* value)
        {
            global::Windows.Networking.Connectivity.NetworkCostType __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfileFilter>(thisPtr).NetworkCostType;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_ServiceProviderGuid_8(IntPtr thisPtr, IntPtr value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfileFilter>(thisPtr).ServiceProviderGuid = MarshalInterface<global::System.Nullable<Guid>>.FromAbi(value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_ServiceProviderGuid_9(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Nullable<Guid> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfileFilter>(thisPtr).ServiceProviderGuid;
                *value = MarshalInterface<global::System.Nullable<Guid>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe bool global::Windows.Networking.Connectivity.IConnectionProfileFilter.IsConnected
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[7](ThisPtr, out __retval));
                return __retval != 0;
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[6](ThisPtr, (byte)(value ? 1 : 0)));
            }
        }

        unsafe bool global::Windows.Networking.Connectivity.IConnectionProfileFilter.IsWlanConnectionProfile
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[11](ThisPtr, out __retval));
                return __retval != 0;
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[10](ThisPtr, (byte)(value ? 1 : 0)));
            }
        }

        unsafe bool global::Windows.Networking.Connectivity.IConnectionProfileFilter.IsWwanConnectionProfile
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[9](ThisPtr, out __retval));
                return __retval != 0;
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, byte, int>**)ThisPtr)[8](ThisPtr, (byte)(value ? 1 : 0)));
            }
        }

        unsafe global::Windows.Networking.Connectivity.NetworkCostType global::Windows.Networking.Connectivity.IConnectionProfileFilter.NetworkCostType
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                global::Windows.Networking.Connectivity.NetworkCostType __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out global::Windows.Networking.Connectivity.NetworkCostType, int>**)ThisPtr)[13](ThisPtr, out __retval));
                return __retval;
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Networking.Connectivity.NetworkCostType, int>**)ThisPtr)[12](ThisPtr, value));
            }
        }

        unsafe global::System.Nullable<Guid> global::Windows.Networking.Connectivity.IConnectionProfileFilter.ServiceProviderGuid
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[15](ThisPtr, out __retval));
                    return MarshalInterface<global::System.Nullable<Guid>>.FromAbi(__retval);
                }
                finally
                {
                    MarshalInterface<global::System.Nullable<Guid>>.DisposeAbi(__retval);
                }
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IObjectReference __value = default;
                try
                {
                    __value = MarshalInterface<global::System.Nullable<Guid>>.CreateMarshaler(value);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[14](ThisPtr, MarshalInterface<global::System.Nullable<Guid>>.GetAbi(__value)));
                }
                finally
                {
                    MarshalInterface<global::System.Nullable<Guid>>.DisposeMarshaler(__value);
                }
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("CD068EE1-C3FC-4FAD-9DDC-593FAA4B7885")]
    internal unsafe interface IConnectionProfileFilter2 : global::Windows.Networking.Connectivity.IConnectionProfileFilter2
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IConnectionProfileFilter2()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IConnectionProfileFilter2), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 7);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_put_IsRoaming_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_IsRoaming_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_put_IsOverDataLimit_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_get_IsOverDataLimit_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_put_IsBackgroundDataUsageRestricted_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_get_IsBackgroundDataUsageRestricted_5;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[12] = &Do_Abi_get_RawData_6;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_IsBackgroundDataUsageRestricted_4(IntPtr thisPtr, IntPtr value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfileFilter2>(thisPtr).IsBackgroundDataUsageRestricted = MarshalInterface<global::System.Nullable<bool>>.FromAbi(value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsBackgroundDataUsageRestricted_5(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Nullable<bool> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfileFilter2>(thisPtr).IsBackgroundDataUsageRestricted;
                *value = MarshalInterface<global::System.Nullable<bool>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_IsOverDataLimit_2(IntPtr thisPtr, IntPtr value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfileFilter2>(thisPtr).IsOverDataLimit = MarshalInterface<global::System.Nullable<bool>>.FromAbi(value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsOverDataLimit_3(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Nullable<bool> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfileFilter2>(thisPtr).IsOverDataLimit;
                *value = MarshalInterface<global::System.Nullable<bool>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_IsRoaming_0(IntPtr thisPtr, IntPtr value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfileFilter2>(thisPtr).IsRoaming = MarshalInterface<global::System.Nullable<bool>>.FromAbi(value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IsRoaming_1(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Nullable<bool> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfileFilter2>(thisPtr).IsRoaming;
                *value = MarshalInterface<global::System.Nullable<bool>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_RawData_6(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Storage.Streams.IBuffer __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfileFilter2>(thisPtr).RawData;
                *value = MarshalInterface<global::Windows.Storage.Streams.IBuffer>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::System.Nullable<bool> global::Windows.Networking.Connectivity.IConnectionProfileFilter2.IsBackgroundDataUsageRestricted
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter2).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[11](ThisPtr, out __retval));
                    return MarshalInterface<global::System.Nullable<bool>>.FromAbi(__retval);
                }
                finally
                {
                    MarshalInterface<global::System.Nullable<bool>>.DisposeAbi(__retval);
                }
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter2).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IObjectReference __value = default;
                try
                {
                    __value = MarshalInterface<global::System.Nullable<bool>>.CreateMarshaler(value);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[10](ThisPtr, MarshalInterface<global::System.Nullable<bool>>.GetAbi(__value)));
                }
                finally
                {
                    MarshalInterface<global::System.Nullable<bool>>.DisposeMarshaler(__value);
                }
            }
        }

        unsafe global::System.Nullable<bool> global::Windows.Networking.Connectivity.IConnectionProfileFilter2.IsOverDataLimit
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter2).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[9](ThisPtr, out __retval));
                    return MarshalInterface<global::System.Nullable<bool>>.FromAbi(__retval);
                }
                finally
                {
                    MarshalInterface<global::System.Nullable<bool>>.DisposeAbi(__retval);
                }
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter2).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IObjectReference __value = default;
                try
                {
                    __value = MarshalInterface<global::System.Nullable<bool>>.CreateMarshaler(value);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, MarshalInterface<global::System.Nullable<bool>>.GetAbi(__value)));
                }
                finally
                {
                    MarshalInterface<global::System.Nullable<bool>>.DisposeMarshaler(__value);
                }
            }
        }

        unsafe global::System.Nullable<bool> global::Windows.Networking.Connectivity.IConnectionProfileFilter2.IsRoaming
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter2).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[7](ThisPtr, out __retval));
                    return MarshalInterface<global::System.Nullable<bool>>.FromAbi(__retval);
                }
                finally
                {
                    MarshalInterface<global::System.Nullable<bool>>.DisposeAbi(__retval);
                }
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter2).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IObjectReference __value = default;
                try
                {
                    __value = MarshalInterface<global::System.Nullable<bool>>.CreateMarshaler(value);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInterface<global::System.Nullable<bool>>.GetAbi(__value)));
                }
                finally
                {
                    MarshalInterface<global::System.Nullable<bool>>.DisposeMarshaler(__value);
                }
            }
        }

        unsafe global::Windows.Storage.Streams.IBuffer global::Windows.Networking.Connectivity.IConnectionProfileFilter2.RawData
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter2).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[12](ThisPtr, out __retval));
                    return MarshalInterface<global::Windows.Storage.Streams.IBuffer>.FromAbi(__retval);
                }
                finally
                {
                    MarshalInterface<global::Windows.Storage.Streams.IBuffer>.DisposeAbi(__retval);
                }
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("0AAA09C0-5014-447C-8809-AEE4CB0AF94A")]
    internal unsafe interface IConnectionProfileFilter3 : global::Windows.Networking.Connectivity.IConnectionProfileFilter3
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IConnectionProfileFilter3()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IConnectionProfileFilter3), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_put_PurposeGuid_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_PurposeGuid_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_PurposeGuid_0(IntPtr thisPtr, IntPtr value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfileFilter3>(thisPtr).PurposeGuid = MarshalInterface<global::System.Nullable<Guid>>.FromAbi(value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_PurposeGuid_1(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Nullable<Guid> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionProfileFilter3>(thisPtr).PurposeGuid;
                *value = MarshalInterface<global::System.Nullable<Guid>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::System.Nullable<Guid> global::Windows.Networking.Connectivity.IConnectionProfileFilter3.PurposeGuid
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter3).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[7](ThisPtr, out __retval));
                    return MarshalInterface<global::System.Nullable<Guid>>.FromAbi(__retval);
                }
                finally
                {
                    MarshalInterface<global::System.Nullable<Guid>>.DisposeAbi(__retval);
                }
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionProfileFilter3).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IObjectReference __value = default;
                try
                {
                    __value = MarshalInterface<global::System.Nullable<Guid>>.CreateMarshaler(value);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalInterface<global::System.Nullable<Guid>>.GetAbi(__value)));
                }
                finally
                {
                    MarshalInterface<global::System.Nullable<Guid>>.DisposeMarshaler(__value);
                }
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("FF905D4C-F83B-41B0-8A0C-1462D9C56B73")]
    internal unsafe interface IConnectionSession : global::Windows.Networking.Connectivity.IConnectionSession
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IConnectionSession()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IConnectionSession), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_ConnectionProfile_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_ConnectionProfile_0(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Networking.Connectivity.ConnectionProfile __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectionSession>(thisPtr).ConnectionProfile;
                *value = global::ABI.Windows.Networking.Connectivity.ConnectionProfile.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Networking.Connectivity.ConnectionProfile global::Windows.Networking.Connectivity.IConnectionSession.ConnectionProfile
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectionSession).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, out __retval));
                    return global::ABI.Windows.Networking.Connectivity.ConnectionProfile.FromAbi(__retval);
                }
                finally
                {
                    global::ABI.Windows.Networking.Connectivity.ConnectionProfile.DisposeAbi(__retval);
                }
            }
        }

        void global::System.IDisposable.Dispose() => ((global::System.IDisposable)(IWinRTObject)this).Dispose();
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("4FAA3FFF-6746-4824-A964-EED8E87F8709")]
    internal unsafe interface IConnectivityInterval : global::Windows.Networking.Connectivity.IConnectivityInterval
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IConnectivityInterval()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IConnectivityInterval), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.DateTimeOffset*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_StartTime_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_ConnectionDuration_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_ConnectionDuration_1(IntPtr thisPtr, global::ABI.System.TimeSpan* duration)
        {
            global::System.TimeSpan __duration = default;

            *duration = default;

            try
            {
                __duration = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectivityInterval>(thisPtr).ConnectionDuration;
                *duration = global::ABI.System.TimeSpan.FromManaged(__duration);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_StartTime_0(IntPtr thisPtr, global::ABI.System.DateTimeOffset* startTime)
        {
            global::System.DateTimeOffset __startTime = default;

            *startTime = default;

            try
            {
                __startTime = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectivityInterval>(thisPtr).StartTime;
                *startTime = global::ABI.System.DateTimeOffset.FromManaged(__startTime);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::System.TimeSpan global::Windows.Networking.Connectivity.IConnectivityInterval.ConnectionDuration
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectivityInterval).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                global::ABI.System.TimeSpan __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out global::ABI.System.TimeSpan, int>**)ThisPtr)[7](ThisPtr, out __retval));
                    return global::ABI.System.TimeSpan.FromAbi(__retval);
                }
                finally
                {
                    global::ABI.System.TimeSpan.DisposeAbi(__retval);
                }
            }
        }

        unsafe global::System.DateTimeOffset global::Windows.Networking.Connectivity.IConnectivityInterval.StartTime
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectivityInterval).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                global::ABI.System.DateTimeOffset __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out global::ABI.System.DateTimeOffset, int>**)ThisPtr)[6](ThisPtr, out __retval));
                    return global::ABI.System.DateTimeOffset.FromAbi(__retval);
                }
                finally
                {
                    global::ABI.System.DateTimeOffset.DisposeAbi(__retval);
                }
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("5120D4B1-4FB1-48B0-AFC9-42E0092A8164")]
    internal unsafe interface IConnectivityManagerStatics : global::Windows.Networking.Connectivity.IConnectivityManagerStatics
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IConnectivityManagerStatics()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IConnectivityManagerStatics), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 3);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_AcquireConnectionAsync_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_AddHttpRoutePolicy_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_RemoveHttpRoutePolicy_2;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_AcquireConnectionAsync_0(IntPtr thisPtr, IntPtr cellularApnContext, IntPtr* operation)
        {
            global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ConnectionSession> __operation = default;

            *operation = default;

            try
            {
                __operation = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectivityManagerStatics>(thisPtr).AcquireConnectionAsync(global::ABI.Windows.Networking.Connectivity.CellularApnContext.FromAbi(cellularApnContext));
                *operation = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ConnectionSession>>.FromManaged(__operation);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_AddHttpRoutePolicy_1(IntPtr thisPtr, IntPtr routePolicy)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectivityManagerStatics>(thisPtr).AddHttpRoutePolicy(global::ABI.Windows.Networking.Connectivity.RoutePolicy.FromAbi(routePolicy));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_RemoveHttpRoutePolicy_2(IntPtr thisPtr, IntPtr routePolicy)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IConnectivityManagerStatics>(thisPtr).RemoveHttpRoutePolicy(global::ABI.Windows.Networking.Connectivity.RoutePolicy.FromAbi(routePolicy));

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ConnectionSession> global::Windows.Networking.Connectivity.IConnectivityManagerStatics.AcquireConnectionAsync(global::Windows.Networking.Connectivity.CellularApnContext cellularApnContext)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectivityManagerStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IObjectReference __cellularApnContext = default;
            IntPtr __retval = default;
            try
            {
                __cellularApnContext = global::ABI.Windows.Networking.Connectivity.CellularApnContext.CreateMarshaler(cellularApnContext);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, global::ABI.Windows.Networking.Connectivity.CellularApnContext.GetAbi(__cellularApnContext), out __retval));
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ConnectionSession>>.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Networking.Connectivity.CellularApnContext.DisposeMarshaler(__cellularApnContext);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ConnectionSession>>.DisposeAbi(__retval);
            }
        }

        unsafe void global::Windows.Networking.Connectivity.IConnectivityManagerStatics.AddHttpRoutePolicy(global::Windows.Networking.Connectivity.RoutePolicy routePolicy)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectivityManagerStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IObjectReference __routePolicy = default;
            try
            {
                __routePolicy = global::ABI.Windows.Networking.Connectivity.RoutePolicy.CreateMarshaler(routePolicy);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, global::ABI.Windows.Networking.Connectivity.RoutePolicy.GetAbi(__routePolicy)));
            }
            finally
            {
                global::ABI.Windows.Networking.Connectivity.RoutePolicy.DisposeMarshaler(__routePolicy);
            }
        }

        unsafe void global::Windows.Networking.Connectivity.IConnectivityManagerStatics.RemoveHttpRoutePolicy(global::Windows.Networking.Connectivity.RoutePolicy routePolicy)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IConnectivityManagerStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IObjectReference __routePolicy = default;
            try
            {
                __routePolicy = global::ABI.Windows.Networking.Connectivity.RoutePolicy.CreateMarshaler(routePolicy);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[8](ThisPtr, global::ABI.Windows.Networking.Connectivity.RoutePolicy.GetAbi(__routePolicy)));
            }
            finally
            {
                global::ABI.Windows.Networking.Connectivity.RoutePolicy.DisposeMarshaler(__routePolicy);
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("977A8B8C-3885-40F3-8851-42CD2BD568BB")]
    internal unsafe interface IDataPlanStatus : global::Windows.Networking.Connectivity.IDataPlanStatus
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IDataPlanStatus()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IDataPlanStatus), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 6);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_DataPlanUsage_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_DataLimitInMegabytes_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_InboundBitsPerSecond_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_get_OutboundBitsPerSecond_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_get_NextBillingCycle_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_get_MaxTransferSizeInMegabytes_5;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_DataLimitInMegabytes_1(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Nullable<uint> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IDataPlanStatus>(thisPtr).DataLimitInMegabytes;
                *value = MarshalInterface<global::System.Nullable<uint>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_DataPlanUsage_0(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Networking.Connectivity.DataPlanUsage __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IDataPlanStatus>(thisPtr).DataPlanUsage;
                *value = global::ABI.Windows.Networking.Connectivity.DataPlanUsage.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_InboundBitsPerSecond_2(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Nullable<ulong> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IDataPlanStatus>(thisPtr).InboundBitsPerSecond;
                *value = MarshalInterface<global::System.Nullable<ulong>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_MaxTransferSizeInMegabytes_5(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Nullable<uint> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IDataPlanStatus>(thisPtr).MaxTransferSizeInMegabytes;
                *value = MarshalInterface<global::System.Nullable<uint>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_NextBillingCycle_4(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Nullable<global::System.DateTimeOffset> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IDataPlanStatus>(thisPtr).NextBillingCycle;
                *value = MarshalInterface<global::System.Nullable<global::System.DateTimeOffset>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_OutboundBitsPerSecond_3(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Nullable<ulong> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IDataPlanStatus>(thisPtr).OutboundBitsPerSecond;
                *value = MarshalInterface<global::System.Nullable<ulong>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::System.Nullable<uint> global::Windows.Networking.Connectivity.IDataPlanStatus.DataLimitInMegabytes
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IDataPlanStatus).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[7](ThisPtr, out __retval));
                    return MarshalInterface<global::System.Nullable<uint>>.FromAbi(__retval);
                }
                finally
                {
                    MarshalInterface<global::System.Nullable<uint>>.DisposeAbi(__retval);
                }
            }
        }

        unsafe global::Windows.Networking.Connectivity.DataPlanUsage global::Windows.Networking.Connectivity.IDataPlanStatus.DataPlanUsage
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IDataPlanStatus).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, out __retval));
                    return global::ABI.Windows.Networking.Connectivity.DataPlanUsage.FromAbi(__retval);
                }
                finally
                {
                    global::ABI.Windows.Networking.Connectivity.DataPlanUsage.DisposeAbi(__retval);
                }
            }
        }

        unsafe global::System.Nullable<ulong> global::Windows.Networking.Connectivity.IDataPlanStatus.InboundBitsPerSecond
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IDataPlanStatus).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[8](ThisPtr, out __retval));
                    return MarshalInterface<global::System.Nullable<ulong>>.FromAbi(__retval);
                }
                finally
                {
                    MarshalInterface<global::System.Nullable<ulong>>.DisposeAbi(__retval);
                }
            }
        }

        unsafe global::System.Nullable<uint> global::Windows.Networking.Connectivity.IDataPlanStatus.MaxTransferSizeInMegabytes
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IDataPlanStatus).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[11](ThisPtr, out __retval));
                    return MarshalInterface<global::System.Nullable<uint>>.FromAbi(__retval);
                }
                finally
                {
                    MarshalInterface<global::System.Nullable<uint>>.DisposeAbi(__retval);
                }
            }
        }

        unsafe global::System.Nullable<global::System.DateTimeOffset> global::Windows.Networking.Connectivity.IDataPlanStatus.NextBillingCycle
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IDataPlanStatus).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[10](ThisPtr, out __retval));
                    return MarshalInterface<global::System.Nullable<global::System.DateTimeOffset>>.FromAbi(__retval);
                }
                finally
                {
                    MarshalInterface<global::System.Nullable<global::System.DateTimeOffset>>.DisposeAbi(__retval);
                }
            }
        }

        unsafe global::System.Nullable<ulong> global::Windows.Networking.Connectivity.IDataPlanStatus.OutboundBitsPerSecond
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IDataPlanStatus).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[9](ThisPtr, out __retval));
                    return MarshalInterface<global::System.Nullable<ulong>>.FromAbi(__retval);
                }
                finally
                {
                    MarshalInterface<global::System.Nullable<ulong>>.DisposeAbi(__retval);
                }
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("B921492D-3B44-47FF-B361-BE59E69ED1B0")]
    internal unsafe interface IDataPlanUsage : global::Windows.Networking.Connectivity.IDataPlanUsage
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IDataPlanUsage()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IDataPlanUsage), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, uint*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_MegabytesUsed_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.DateTimeOffset*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_LastSyncTime_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_LastSyncTime_1(IntPtr thisPtr, global::ABI.System.DateTimeOffset* value)
        {
            global::System.DateTimeOffset __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IDataPlanUsage>(thisPtr).LastSyncTime;
                *value = global::ABI.System.DateTimeOffset.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_MegabytesUsed_0(IntPtr thisPtr, uint* value)
        {
            uint __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IDataPlanUsage>(thisPtr).MegabytesUsed;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::System.DateTimeOffset global::Windows.Networking.Connectivity.IDataPlanUsage.LastSyncTime
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IDataPlanUsage).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                global::ABI.System.DateTimeOffset __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out global::ABI.System.DateTimeOffset, int>**)ThisPtr)[7](ThisPtr, out __retval));
                    return global::ABI.System.DateTimeOffset.FromAbi(__retval);
                }
                finally
                {
                    global::ABI.System.DateTimeOffset.DisposeAbi(__retval);
                }
            }
        }

        unsafe uint global::Windows.Networking.Connectivity.IDataPlanUsage.MegabytesUsed
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IDataPlanUsage).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                uint __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out uint, int>**)ThisPtr)[6](ThisPtr, out __retval));
                return __retval;
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("C1431DD3-B146-4D39-B959-0C69B096C512")]
    internal unsafe interface IDataUsage : global::Windows.Networking.Connectivity.IDataUsage
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IDataUsage()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IDataUsage), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_BytesSent_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_BytesReceived_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_BytesReceived_1(IntPtr thisPtr, ulong* value)
        {
            ulong __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IDataUsage>(thisPtr).BytesReceived;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_BytesSent_0(IntPtr thisPtr, ulong* value)
        {
            ulong __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IDataUsage>(thisPtr).BytesSent;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe ulong global::Windows.Networking.Connectivity.IDataUsage.BytesReceived
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IDataUsage).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                ulong __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out ulong, int>**)ThisPtr)[7](ThisPtr, out __retval));
                return __retval;
            }
        }

        unsafe ulong global::Windows.Networking.Connectivity.IDataUsage.BytesSent
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IDataUsage).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                ulong __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out ulong, int>**)ThisPtr)[6](ThisPtr, out __retval));
                return __retval;
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("D85145E0-138F-47D7-9B3A-36BB488CEF33")]
    internal unsafe interface IIPInformation : global::Windows.Networking.Connectivity.IIPInformation
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IIPInformation()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IIPInformation), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_NetworkAdapter_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_PrefixLength_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_NetworkAdapter_0(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Networking.Connectivity.NetworkAdapter __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IIPInformation>(thisPtr).NetworkAdapter;
                *value = global::ABI.Windows.Networking.Connectivity.NetworkAdapter.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_PrefixLength_1(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Nullable<byte> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IIPInformation>(thisPtr).PrefixLength;
                *value = MarshalInterface<global::System.Nullable<byte>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Networking.Connectivity.NetworkAdapter global::Windows.Networking.Connectivity.IIPInformation.NetworkAdapter
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IIPInformation).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, out __retval));
                    return global::ABI.Windows.Networking.Connectivity.NetworkAdapter.FromAbi(__retval);
                }
                finally
                {
                    global::ABI.Windows.Networking.Connectivity.NetworkAdapter.DisposeAbi(__retval);
                }
            }
        }

        unsafe global::System.Nullable<byte> global::Windows.Networking.Connectivity.IIPInformation.PrefixLength
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IIPInformation).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[7](ThisPtr, out __retval));
                    return MarshalInterface<global::System.Nullable<byte>>.FromAbi(__retval);
                }
                finally
                {
                    MarshalInterface<global::System.Nullable<byte>>.DisposeAbi(__retval);
                }
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("48AA53AA-1108-4546-A6CB-9A74DA4B7BA0")]
    internal unsafe interface ILanIdentifier : global::Windows.Networking.Connectivity.ILanIdentifier
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe ILanIdentifier()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ILanIdentifier), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 3);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_InfrastructureId_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_PortId_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, Guid*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_NetworkAdapterId_2;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_InfrastructureId_0(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Networking.Connectivity.LanIdentifierData __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.ILanIdentifier>(thisPtr).InfrastructureId;
                *value = global::ABI.Windows.Networking.Connectivity.LanIdentifierData.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_NetworkAdapterId_2(IntPtr thisPtr, Guid* value)
        {
            Guid __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.ILanIdentifier>(thisPtr).NetworkAdapterId;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_PortId_1(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Networking.Connectivity.LanIdentifierData __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.ILanIdentifier>(thisPtr).PortId;
                *value = global::ABI.Windows.Networking.Connectivity.LanIdentifierData.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Networking.Connectivity.LanIdentifierData global::Windows.Networking.Connectivity.ILanIdentifier.InfrastructureId
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.ILanIdentifier).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, out __retval));
                    return global::ABI.Windows.Networking.Connectivity.LanIdentifierData.FromAbi(__retval);
                }
                finally
                {
                    global::ABI.Windows.Networking.Connectivity.LanIdentifierData.DisposeAbi(__retval);
                }
            }
        }

        unsafe Guid global::Windows.Networking.Connectivity.ILanIdentifier.NetworkAdapterId
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.ILanIdentifier).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                Guid __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out Guid, int>**)ThisPtr)[8](ThisPtr, out __retval));
                return __retval;
            }
        }

        unsafe global::Windows.Networking.Connectivity.LanIdentifierData global::Windows.Networking.Connectivity.ILanIdentifier.PortId
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.ILanIdentifier).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[7](ThisPtr, out __retval));
                    return global::ABI.Windows.Networking.Connectivity.LanIdentifierData.FromAbi(__retval);
                }
                finally
                {
                    global::ABI.Windows.Networking.Connectivity.LanIdentifierData.DisposeAbi(__retval);
                }
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("A74E83C3-D639-45BE-A36A-C4E4AEAF6D9B")]
    internal unsafe interface ILanIdentifierData : global::Windows.Networking.Connectivity.ILanIdentifierData
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe ILanIdentifierData()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(ILanIdentifierData), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, uint*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_Type_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_Value_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_Type_0(IntPtr thisPtr, uint* value)
        {
            uint __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.ILanIdentifierData>(thisPtr).Type;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_Value_1(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Collections.Generic.IReadOnlyList<byte> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.ILanIdentifierData>(thisPtr).Value;
                *value = MarshalInterface<global::System.Collections.Generic.IReadOnlyList<byte>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe uint global::Windows.Networking.Connectivity.ILanIdentifierData.Type
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.ILanIdentifierData).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                uint __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out uint, int>**)ThisPtr)[6](ThisPtr, out __retval));
                return __retval;
            }
        }

        unsafe global::System.Collections.Generic.IReadOnlyList<byte> global::Windows.Networking.Connectivity.ILanIdentifierData.Value
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.ILanIdentifierData).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[7](ThisPtr, out __retval));
                    return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<byte>>.FromAbi(__retval);
                }
                finally
                {
                    MarshalInterface<global::System.Collections.Generic.IReadOnlyList<byte>>.DisposeAbi(__retval);
                }
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("3B542E03-5388-496C-A8A3-AFFD39AEC2E6")]
    internal unsafe interface INetworkAdapter : global::Windows.Networking.Connectivity.INetworkAdapter
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe INetworkAdapter()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(INetworkAdapter), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 6);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_OutboundMaxBitsPerSecond_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_InboundMaxBitsPerSecond_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, uint*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_IanaInterfaceType_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_get_NetworkItem_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, Guid*, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_get_NetworkAdapterId_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_GetConnectedProfileAsync_5;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetConnectedProfileAsync_5(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ConnectionProfile> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkAdapter>(thisPtr).GetConnectedProfileAsync();
                *value = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ConnectionProfile>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IanaInterfaceType_2(IntPtr thisPtr, uint* value)
        {
            uint __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkAdapter>(thisPtr).IanaInterfaceType;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_InboundMaxBitsPerSecond_1(IntPtr thisPtr, ulong* value)
        {
            ulong __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkAdapter>(thisPtr).InboundMaxBitsPerSecond;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_NetworkAdapterId_4(IntPtr thisPtr, Guid* value)
        {
            Guid __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkAdapter>(thisPtr).NetworkAdapterId;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_NetworkItem_3(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Networking.Connectivity.NetworkItem __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkAdapter>(thisPtr).NetworkItem;
                *value = global::ABI.Windows.Networking.Connectivity.NetworkItem.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_OutboundMaxBitsPerSecond_0(IntPtr thisPtr, ulong* value)
        {
            ulong __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkAdapter>(thisPtr).OutboundMaxBitsPerSecond;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ConnectionProfile> global::Windows.Networking.Connectivity.INetworkAdapter.GetConnectedProfileAsync()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkAdapter).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[11](ThisPtr, out __retval));
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ConnectionProfile>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ConnectionProfile>>.DisposeAbi(__retval);
            }
        }

        unsafe uint global::Windows.Networking.Connectivity.INetworkAdapter.IanaInterfaceType
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkAdapter).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                uint __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out uint, int>**)ThisPtr)[8](ThisPtr, out __retval));
                return __retval;
            }
        }

        unsafe ulong global::Windows.Networking.Connectivity.INetworkAdapter.InboundMaxBitsPerSecond
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkAdapter).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                ulong __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out ulong, int>**)ThisPtr)[7](ThisPtr, out __retval));
                return __retval;
            }
        }

        unsafe Guid global::Windows.Networking.Connectivity.INetworkAdapter.NetworkAdapterId
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkAdapter).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                Guid __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out Guid, int>**)ThisPtr)[10](ThisPtr, out __retval));
                return __retval;
            }
        }

        unsafe global::Windows.Networking.Connectivity.NetworkItem global::Windows.Networking.Connectivity.INetworkAdapter.NetworkItem
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkAdapter).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[9](ThisPtr, out __retval));
                    return global::ABI.Windows.Networking.Connectivity.NetworkItem.FromAbi(__retval);
                }
                finally
                {
                    global::ABI.Windows.Networking.Connectivity.NetworkItem.DisposeAbi(__retval);
                }
            }
        }

        unsafe ulong global::Windows.Networking.Connectivity.INetworkAdapter.OutboundMaxBitsPerSecond
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkAdapter).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                ulong __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out ulong, int>**)ThisPtr)[6](ThisPtr, out __retval));
                return __retval;
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("5074F851-950D-4165-9C15-365619481EEA")]
    internal unsafe interface INetworkInformationStatics : global::Windows.Networking.Connectivity.INetworkInformationStatics
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe INetworkInformationStatics()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(INetworkInformationStatics), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 8);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GetConnectionProfiles_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_GetInternetConnectionProfile_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_GetLanIdentifiers_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_GetHostNames_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_GetProxyConfigurationAsync_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Networking.HostNameSortOptions, IntPtr*, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_GetSortedEndpointPairs_5;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::WinRT.EventRegistrationToken*, int>*)AbiToProjectionVftablePtr)[12] = &Do_Abi_add_NetworkStatusChanged_6;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>*)AbiToProjectionVftablePtr)[13] = &Do_Abi_remove_NetworkStatusChanged_7;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetConnectionProfiles_0(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ConnectionProfile> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkInformationStatics>(thisPtr).GetConnectionProfiles();
                *value = MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ConnectionProfile>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetInternetConnectionProfile_1(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Networking.Connectivity.ConnectionProfile __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkInformationStatics>(thisPtr).GetInternetConnectionProfile();
                *value = global::ABI.Windows.Networking.Connectivity.ConnectionProfile.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetLanIdentifiers_2(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.LanIdentifier> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkInformationStatics>(thisPtr).GetLanIdentifiers();
                *value = MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.LanIdentifier>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetHostNames_3(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.HostName> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkInformationStatics>(thisPtr).GetHostNames();
                *value = MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.HostName>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetProxyConfigurationAsync_4(IntPtr thisPtr, IntPtr uri, IntPtr* value)
        {
            global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ProxyConfiguration> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkInformationStatics>(thisPtr).GetProxyConfigurationAsync(global::ABI.System.Uri.FromAbi(uri));
                *value = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ProxyConfiguration>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetSortedEndpointPairs_5(IntPtr thisPtr, IntPtr destinationList, global::Windows.Networking.HostNameSortOptions sortOptions, IntPtr* value)
        {
            global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.EndpointPair> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkInformationStatics>(thisPtr).GetSortedEndpointPairs(MarshalInterface<global::System.Collections.Generic.IEnumerable<global::Windows.Networking.EndpointPair>>.FromAbi(destinationList), sortOptions);
                *value = MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.EndpointPair>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Windows.Networking.Connectivity.INetworkInformationStatics, global::WinRT.EventRegistrationTokenTable<global::Windows.Networking.Connectivity.NetworkStatusChangedEventHandler>> _NetworkStatusChanged_TokenTables = new global::System.Runtime.CompilerServices.ConditionalWeakTable<global::Windows.Networking.Connectivity.INetworkInformationStatics, global::WinRT.EventRegistrationTokenTable<global::Windows.Networking.Connectivity.NetworkStatusChangedEventHandler>>();
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_add_NetworkStatusChanged_6(IntPtr thisPtr, IntPtr networkStatusHandler, global::WinRT.EventRegistrationToken* eventCookie)
        {
            *eventCookie = default;
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkInformationStatics>(thisPtr);
                var __handler = NetworkStatusChangedEventHandler.FromAbi(networkStatusHandler);
                *eventCookie = _NetworkStatusChanged_TokenTables.GetOrCreateValue(__this).AddEventHandler(__handler);
                __this.NetworkStatusChanged += __handler;
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_remove_NetworkStatusChanged_7(IntPtr thisPtr, global::WinRT.EventRegistrationToken eventCookie)
        {
            try
            {
                var __this = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkInformationStatics>(thisPtr);
                if(__this != null && _NetworkStatusChanged_TokenTables.TryGetValue(__this, out var __table) && __table.RemoveEventHandler(eventCookie, out var __handler))
                {
                    __this.NetworkStatusChanged -= __handler;
                }
                return 0;
            }
            catch (Exception __ex)
            {
                return __ex.HResult;
            }
        }

        unsafe global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ConnectionProfile> global::Windows.Networking.Connectivity.INetworkInformationStatics.GetConnectionProfiles()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkInformationStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, out __retval));
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ConnectionProfile>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ConnectionProfile>>.DisposeAbi(__retval);
            }
        }

        unsafe global::Windows.Networking.Connectivity.ConnectionProfile global::Windows.Networking.Connectivity.INetworkInformationStatics.GetInternetConnectionProfile()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkInformationStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[7](ThisPtr, out __retval));
                return global::ABI.Windows.Networking.Connectivity.ConnectionProfile.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Networking.Connectivity.ConnectionProfile.DisposeAbi(__retval);
            }
        }

        unsafe global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.LanIdentifier> global::Windows.Networking.Connectivity.INetworkInformationStatics.GetLanIdentifiers()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkInformationStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[8](ThisPtr, out __retval));
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.LanIdentifier>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.LanIdentifier>>.DisposeAbi(__retval);
            }
        }

        unsafe global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.HostName> global::Windows.Networking.Connectivity.INetworkInformationStatics.GetHostNames()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkInformationStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[9](ThisPtr, out __retval));
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.HostName>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.HostName>>.DisposeAbi(__retval);
            }
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ProxyConfiguration> global::Windows.Networking.Connectivity.INetworkInformationStatics.GetProxyConfigurationAsync(global::System.Uri uri)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkInformationStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IObjectReference __uri = default;
            IntPtr __retval = default;
            try
            {
                __uri = global::ABI.System.Uri.CreateMarshaler(uri);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, out IntPtr, int>**)ThisPtr)[10](ThisPtr, global::ABI.System.Uri.GetAbi(__uri), out __retval));
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ProxyConfiguration>>.FromAbi(__retval);
            }
            finally
            {
                global::ABI.System.Uri.DisposeMarshaler(__uri);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::Windows.Networking.Connectivity.ProxyConfiguration>>.DisposeAbi(__retval);
            }
        }

        unsafe global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.EndpointPair> global::Windows.Networking.Connectivity.INetworkInformationStatics.GetSortedEndpointPairs(global::System.Collections.Generic.IEnumerable<global::Windows.Networking.EndpointPair> destinationList, global::Windows.Networking.HostNameSortOptions sortOptions)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkInformationStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IObjectReference __destinationList = default;
            IntPtr __retval = default;
            try
            {
                __destinationList = MarshalInterface<global::System.Collections.Generic.IEnumerable<global::Windows.Networking.EndpointPair>>.CreateMarshaler(destinationList);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, global::Windows.Networking.HostNameSortOptions, out IntPtr, int>**)ThisPtr)[11](ThisPtr, MarshalInterface<global::System.Collections.Generic.IEnumerable<global::Windows.Networking.EndpointPair>>.GetAbi(__destinationList), sortOptions, out __retval));
                return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.EndpointPair>>.FromAbi(__retval);
            }
            finally
            {
                MarshalInterface<global::System.Collections.Generic.IEnumerable<global::Windows.Networking.EndpointPair>>.DisposeMarshaler(__destinationList);
                MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.EndpointPair>>.DisposeAbi(__retval);
            }
        }

        event global::Windows.Networking.Connectivity.NetworkStatusChangedEventHandler global::Windows.Networking.Connectivity.INetworkInformationStatics.NetworkStatusChanged
        {
            add => _NetworkStatusChanged.GetValue((IWinRTObject)this, (key) =>
            {

                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkInformationStatics).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                return 
                    new EventSource<global::Windows.Networking.Connectivity.NetworkStatusChangedEventHandler>(_obj,
                    (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, out global::WinRT.EventRegistrationToken, int>**)ThisPtr)[12],
                    (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[13]);
            }).Subscribe(value);
            remove => _NetworkStatusChanged.GetValue((IWinRTObject)this, (key) =>
            {

                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkInformationStatics).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                return 
                    new EventSource<global::Windows.Networking.Connectivity.NetworkStatusChangedEventHandler>(_obj,
                    (*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, out global::WinRT.EventRegistrationToken, int>**)ThisPtr)[12],
                    (*(delegate* unmanaged[Stdcall]<IntPtr, global::WinRT.EventRegistrationToken, int>**)ThisPtr)[13]);
            }).Unsubscribe(value);
        }

        private static global::System.Runtime.CompilerServices.ConditionalWeakTable<IWinRTObject, EventSource<global::Windows.Networking.Connectivity.NetworkStatusChangedEventHandler>> _NetworkStatusChanged = new();}

    [DynamicInterfaceCastableImplementation]
    [Guid("459CED14-2832-49B6-BA6E-E265F04786A8")]
    internal unsafe interface INetworkInformationStatics2 : global::Windows.Networking.Connectivity.INetworkInformationStatics2
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe INetworkInformationStatics2()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(INetworkInformationStatics2), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_FindConnectionProfilesAsync_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_FindConnectionProfilesAsync_0(IntPtr thisPtr, IntPtr pProfileFilter, IntPtr* value)
        {
            global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ConnectionProfile>> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkInformationStatics2>(thisPtr).FindConnectionProfilesAsync(global::ABI.Windows.Networking.Connectivity.ConnectionProfileFilter.FromAbi(pProfileFilter));
                *value = MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ConnectionProfile>>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ConnectionProfile>> global::Windows.Networking.Connectivity.INetworkInformationStatics2.FindConnectionProfilesAsync(global::Windows.Networking.Connectivity.ConnectionProfileFilter pProfileFilter)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkInformationStatics2).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IObjectReference __pProfileFilter = default;
            IntPtr __retval = default;
            try
            {
                __pProfileFilter = global::ABI.Windows.Networking.Connectivity.ConnectionProfileFilter.CreateMarshaler(pProfileFilter);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, global::ABI.Windows.Networking.Connectivity.ConnectionProfileFilter.GetAbi(__pProfileFilter), out __retval));
                return MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ConnectionProfile>>>.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Networking.Connectivity.ConnectionProfileFilter.DisposeMarshaler(__pProfileFilter);
                MarshalInterface<global::Windows.Foundation.IAsyncOperation<global::System.Collections.Generic.IReadOnlyList<global::Windows.Networking.Connectivity.ConnectionProfile>>>.DisposeAbi(__retval);
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("01BC4D39-F5E0-4567-A28C-42080C831B2B")]
    internal unsafe interface INetworkItem : global::Windows.Networking.Connectivity.INetworkItem
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe INetworkItem()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(INetworkItem), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, Guid*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_NetworkId_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Networking.Connectivity.NetworkTypes*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_GetNetworkTypes_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetNetworkTypes_1(IntPtr thisPtr, global::Windows.Networking.Connectivity.NetworkTypes* value)
        {
            global::Windows.Networking.Connectivity.NetworkTypes __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkItem>(thisPtr).GetNetworkTypes();
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_NetworkId_0(IntPtr thisPtr, Guid* value)
        {
            Guid __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkItem>(thisPtr).NetworkId;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Networking.Connectivity.NetworkTypes global::Windows.Networking.Connectivity.INetworkItem.GetNetworkTypes()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkItem).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Networking.Connectivity.NetworkTypes __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out global::Windows.Networking.Connectivity.NetworkTypes, int>**)ThisPtr)[7](ThisPtr, out __retval));
            return __retval;
        }

        unsafe Guid global::Windows.Networking.Connectivity.INetworkItem.NetworkId
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkItem).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                Guid __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out Guid, int>**)ThisPtr)[6](ThisPtr, out __retval));
                return __retval;
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("7CA07E8D-917B-4B5F-B84D-28F7A5AC5402")]
    internal unsafe interface INetworkSecuritySettings : global::Windows.Networking.Connectivity.INetworkSecuritySettings
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe INetworkSecuritySettings()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(INetworkSecuritySettings), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Networking.Connectivity.NetworkAuthenticationType*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_NetworkAuthenticationType_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Networking.Connectivity.NetworkEncryptionType*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_NetworkEncryptionType_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_NetworkAuthenticationType_0(IntPtr thisPtr, global::Windows.Networking.Connectivity.NetworkAuthenticationType* value)
        {
            global::Windows.Networking.Connectivity.NetworkAuthenticationType __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkSecuritySettings>(thisPtr).NetworkAuthenticationType;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_NetworkEncryptionType_1(IntPtr thisPtr, global::Windows.Networking.Connectivity.NetworkEncryptionType* value)
        {
            global::Windows.Networking.Connectivity.NetworkEncryptionType __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkSecuritySettings>(thisPtr).NetworkEncryptionType;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Networking.Connectivity.NetworkAuthenticationType global::Windows.Networking.Connectivity.INetworkSecuritySettings.NetworkAuthenticationType
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkSecuritySettings).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                global::Windows.Networking.Connectivity.NetworkAuthenticationType __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out global::Windows.Networking.Connectivity.NetworkAuthenticationType, int>**)ThisPtr)[6](ThisPtr, out __retval));
                return __retval;
            }
        }

        unsafe global::Windows.Networking.Connectivity.NetworkEncryptionType global::Windows.Networking.Connectivity.INetworkSecuritySettings.NetworkEncryptionType
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkSecuritySettings).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                global::Windows.Networking.Connectivity.NetworkEncryptionType __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out global::Windows.Networking.Connectivity.NetworkEncryptionType, int>**)ThisPtr)[7](ThisPtr, out __retval));
                return __retval;
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("1F0CF333-D7A6-44DD-A4E9-687C476B903D")]
    internal unsafe interface INetworkStateChangeEventDetails : global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe INetworkStateChangeEventDetails()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(INetworkStateChangeEventDetails), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 6);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_HasNewInternetConnectionProfile_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_HasNewConnectionCost_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_HasNewNetworkConnectivityLevel_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_get_HasNewDomainConnectivityLevel_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_get_HasNewHostNameList_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_get_HasNewWwanRegistrationState_5;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_HasNewConnectionCost_1(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails>(thisPtr).HasNewConnectionCost;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_HasNewDomainConnectivityLevel_3(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails>(thisPtr).HasNewDomainConnectivityLevel;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_HasNewHostNameList_4(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails>(thisPtr).HasNewHostNameList;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_HasNewInternetConnectionProfile_0(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails>(thisPtr).HasNewInternetConnectionProfile;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_HasNewNetworkConnectivityLevel_2(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails>(thisPtr).HasNewNetworkConnectivityLevel;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_HasNewWwanRegistrationState_5(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails>(thisPtr).HasNewWwanRegistrationState;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe bool global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails.HasNewConnectionCost
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[7](ThisPtr, out __retval));
                return __retval != 0;
            }
        }

        unsafe bool global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails.HasNewDomainConnectivityLevel
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[9](ThisPtr, out __retval));
                return __retval != 0;
            }
        }

        unsafe bool global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails.HasNewHostNameList
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[10](ThisPtr, out __retval));
                return __retval != 0;
            }
        }

        unsafe bool global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails.HasNewInternetConnectionProfile
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[6](ThisPtr, out __retval));
                return __retval != 0;
            }
        }

        unsafe bool global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails.HasNewNetworkConnectivityLevel
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[8](ThisPtr, out __retval));
                return __retval != 0;
            }
        }

        unsafe bool global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails.HasNewWwanRegistrationState
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[11](ThisPtr, out __retval));
                return __retval != 0;
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("D643C0E8-30D3-4F6A-AD47-6A1873CEB3C1")]
    internal unsafe interface INetworkStateChangeEventDetails2 : global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails2
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe INetworkStateChangeEventDetails2()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(INetworkStateChangeEventDetails2), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_HasNewTetheringOperationalState_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_HasNewTetheringClientCount_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_HasNewTetheringClientCount_1(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails2>(thisPtr).HasNewTetheringClientCount;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_HasNewTetheringOperationalState_0(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails2>(thisPtr).HasNewTetheringOperationalState;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe bool global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails2.HasNewTetheringClientCount
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails2).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[7](ThisPtr, out __retval));
                return __retval != 0;
            }
        }

        unsafe bool global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails2.HasNewTetheringOperationalState
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails2).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[6](ThisPtr, out __retval));
                return __retval != 0;
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("49DA8FCE-9985-4927-BF5B-072B5C65F8D9")]
    internal unsafe interface INetworkUsage : global::Windows.Networking.Connectivity.INetworkUsage
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe INetworkUsage()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(INetworkUsage), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 3);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_BytesSent_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_BytesReceived_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::ABI.System.TimeSpan*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_ConnectionDuration_2;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_BytesReceived_1(IntPtr thisPtr, ulong* value)
        {
            ulong __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkUsage>(thisPtr).BytesReceived;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_BytesSent_0(IntPtr thisPtr, ulong* value)
        {
            ulong __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkUsage>(thisPtr).BytesSent;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_ConnectionDuration_2(IntPtr thisPtr, global::ABI.System.TimeSpan* duration)
        {
            global::System.TimeSpan __duration = default;

            *duration = default;

            try
            {
                __duration = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.INetworkUsage>(thisPtr).ConnectionDuration;
                *duration = global::ABI.System.TimeSpan.FromManaged(__duration);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe ulong global::Windows.Networking.Connectivity.INetworkUsage.BytesReceived
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkUsage).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                ulong __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out ulong, int>**)ThisPtr)[7](ThisPtr, out __retval));
                return __retval;
            }
        }

        unsafe ulong global::Windows.Networking.Connectivity.INetworkUsage.BytesSent
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkUsage).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                ulong __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out ulong, int>**)ThisPtr)[6](ThisPtr, out __retval));
                return __retval;
            }
        }

        unsafe global::System.TimeSpan global::Windows.Networking.Connectivity.INetworkUsage.ConnectionDuration
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.INetworkUsage).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                global::ABI.System.TimeSpan __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out global::ABI.System.TimeSpan, int>**)ThisPtr)[8](ThisPtr, out __retval));
                    return global::ABI.System.TimeSpan.FromAbi(__retval);
                }
                finally
                {
                    global::ABI.System.TimeSpan.DisposeAbi(__retval);
                }
            }
        }
    }

    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct IPInformation
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.IPInformation obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.IPInformation>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.IIPInformation).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.IPInformation FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.IPInformation.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.IPInformation obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.IPInformation>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.IPInformation[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.IPInformation>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.IPInformation>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.IPInformation[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.IPInformation>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.IPInformation[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.IPInformation>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.IPInformation>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.IPInformation>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [DynamicInterfaceCastableImplementation]
    [Guid("5EC69E04-7931-48C8-B8F3-46300FA42728")]
    internal unsafe interface IProviderNetworkUsage : global::Windows.Networking.Connectivity.IProviderNetworkUsage
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IProviderNetworkUsage()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IProviderNetworkUsage), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 3);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_BytesSent_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, ulong*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_BytesReceived_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_ProviderId_2;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_BytesReceived_1(IntPtr thisPtr, ulong* value)
        {
            ulong __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IProviderNetworkUsage>(thisPtr).BytesReceived;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_BytesSent_0(IntPtr thisPtr, ulong* value)
        {
            ulong __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IProviderNetworkUsage>(thisPtr).BytesSent;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_ProviderId_2(IntPtr thisPtr, IntPtr* value)
        {
            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IProviderNetworkUsage>(thisPtr).ProviderId;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe ulong global::Windows.Networking.Connectivity.IProviderNetworkUsage.BytesReceived
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IProviderNetworkUsage).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                ulong __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out ulong, int>**)ThisPtr)[7](ThisPtr, out __retval));
                return __retval;
            }
        }

        unsafe ulong global::Windows.Networking.Connectivity.IProviderNetworkUsage.BytesSent
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IProviderNetworkUsage).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                ulong __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out ulong, int>**)ThisPtr)[6](ThisPtr, out __retval));
                return __retval;
            }
        }

        unsafe string global::Windows.Networking.Connectivity.IProviderNetworkUsage.ProviderId
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IProviderNetworkUsage).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[8](ThisPtr, out __retval));
                    return MarshalString.FromAbi(__retval);
                }
                finally
                {
                    MarshalString.DisposeAbi(__retval);
                }
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("EF3A60B4-9004-4DD6-B7D8-B3E502F4AAD0")]
    internal unsafe interface IProxyConfiguration : global::Windows.Networking.Connectivity.IProxyConfiguration
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IProxyConfiguration()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IProxyConfiguration), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_ProxyUris_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_CanConnectDirectly_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_CanConnectDirectly_1(IntPtr thisPtr, byte* value)
        {
            bool __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IProxyConfiguration>(thisPtr).CanConnectDirectly;
                *value = (byte)(__value ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_ProxyUris_0(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Collections.Generic.IReadOnlyList<global::System.Uri> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IProxyConfiguration>(thisPtr).ProxyUris;
                *value = MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::System.Uri>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe bool global::Windows.Networking.Connectivity.IProxyConfiguration.CanConnectDirectly
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IProxyConfiguration).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                byte __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out byte, int>**)ThisPtr)[7](ThisPtr, out __retval));
                return __retval != 0;
            }
        }

        unsafe global::System.Collections.Generic.IReadOnlyList<global::System.Uri> global::Windows.Networking.Connectivity.IProxyConfiguration.ProxyUris
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IProxyConfiguration).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, out __retval));
                    return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::System.Uri>>.FromAbi(__retval);
                }
                finally
                {
                    MarshalInterface<global::System.Collections.Generic.IReadOnlyList<global::System.Uri>>.DisposeAbi(__retval);
                }
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("11ABC4AC-0FC7-42E4-8742-569923B1CA11")]
    internal unsafe interface IRoutePolicy : global::Windows.Networking.Connectivity.IRoutePolicy
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IRoutePolicy()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IRoutePolicy), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 3);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_ConnectionProfile_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_HostName_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Networking.DomainNameType*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_HostNameType_2;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_ConnectionProfile_0(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Networking.Connectivity.ConnectionProfile __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IRoutePolicy>(thisPtr).ConnectionProfile;
                *value = global::ABI.Windows.Networking.Connectivity.ConnectionProfile.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_HostName_1(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Networking.HostName __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IRoutePolicy>(thisPtr).HostName;
                *value = global::ABI.Windows.Networking.HostName.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_HostNameType_2(IntPtr thisPtr, global::Windows.Networking.DomainNameType* value)
        {
            global::Windows.Networking.DomainNameType __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IRoutePolicy>(thisPtr).HostNameType;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Networking.Connectivity.ConnectionProfile global::Windows.Networking.Connectivity.IRoutePolicy.ConnectionProfile
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IRoutePolicy).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, out __retval));
                    return global::ABI.Windows.Networking.Connectivity.ConnectionProfile.FromAbi(__retval);
                }
                finally
                {
                    global::ABI.Windows.Networking.Connectivity.ConnectionProfile.DisposeAbi(__retval);
                }
            }
        }

        unsafe global::Windows.Networking.HostName global::Windows.Networking.Connectivity.IRoutePolicy.HostName
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IRoutePolicy).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[7](ThisPtr, out __retval));
                    return global::ABI.Windows.Networking.HostName.FromAbi(__retval);
                }
                finally
                {
                    global::ABI.Windows.Networking.HostName.DisposeAbi(__retval);
                }
            }
        }

        unsafe global::Windows.Networking.DomainNameType global::Windows.Networking.Connectivity.IRoutePolicy.HostNameType
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IRoutePolicy).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                global::Windows.Networking.DomainNameType __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out global::Windows.Networking.DomainNameType, int>**)ThisPtr)[8](ThisPtr, out __retval));
                return __retval;
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("36027933-A18E-4DB5-A697-F58FA7364E44")]
    internal unsafe interface IRoutePolicyFactory : global::Windows.Networking.Connectivity.IRoutePolicyFactory
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IRoutePolicyFactory()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IRoutePolicyFactory), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Windows.Networking.DomainNameType, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_CreateRoutePolicy_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_CreateRoutePolicy_0(IntPtr thisPtr, IntPtr connectionProfile, IntPtr hostName, global::Windows.Networking.DomainNameType type, IntPtr* routePolicy)
        {
            global::Windows.Networking.Connectivity.RoutePolicy __routePolicy = default;

            *routePolicy = default;

            try
            {
                __routePolicy = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IRoutePolicyFactory>(thisPtr).CreateRoutePolicy(global::ABI.Windows.Networking.Connectivity.ConnectionProfile.FromAbi(connectionProfile), global::ABI.Windows.Networking.HostName.FromAbi(hostName), type);
                *routePolicy = global::ABI.Windows.Networking.Connectivity.RoutePolicy.FromManaged(__routePolicy);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Networking.Connectivity.RoutePolicy global::Windows.Networking.Connectivity.IRoutePolicyFactory.CreateRoutePolicy(global::Windows.Networking.Connectivity.ConnectionProfile connectionProfile, global::Windows.Networking.HostName hostName, global::Windows.Networking.DomainNameType type)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IRoutePolicyFactory).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IObjectReference __connectionProfile = default;
            IObjectReference __hostName = default;
            IntPtr __retval = default;
            try
            {
                __connectionProfile = global::ABI.Windows.Networking.Connectivity.ConnectionProfile.CreateMarshaler(connectionProfile);
                __hostName = global::ABI.Windows.Networking.HostName.CreateMarshaler(hostName);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, global::Windows.Networking.DomainNameType, out IntPtr, int>**)ThisPtr)[6](ThisPtr, global::ABI.Windows.Networking.Connectivity.ConnectionProfile.GetAbi(__connectionProfile), global::ABI.Windows.Networking.HostName.GetAbi(__hostName), type, out __retval));
                return global::ABI.Windows.Networking.Connectivity.RoutePolicy.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Networking.Connectivity.ConnectionProfile.DisposeMarshaler(__connectionProfile);
                global::ABI.Windows.Networking.HostName.DisposeMarshaler(__hostName);
                global::ABI.Windows.Networking.Connectivity.RoutePolicy.DisposeAbi(__retval);
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("562098CB-B35A-4BF1-A884-B7557E88FF86")]
    internal unsafe interface IWlanConnectionProfileDetails : global::Windows.Networking.Connectivity.IWlanConnectionProfileDetails
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IWlanConnectionProfileDetails()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IWlanConnectionProfileDetails), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_GetConnectedSsid_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetConnectedSsid_0(IntPtr thisPtr, IntPtr* value)
        {
            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IWlanConnectionProfileDetails>(thisPtr).GetConnectedSsid();
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe string global::Windows.Networking.Connectivity.IWlanConnectionProfileDetails.GetConnectedSsid()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IWlanConnectionProfileDetails).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IntPtr __retval = default;
            try
            {
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, out __retval));
                return MarshalString.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeAbi(__retval);
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("0E4DA8FE-835F-4DF3-82FD-DF556EBC09EF")]
    internal unsafe interface IWwanConnectionProfileDetails : global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IWwanConnectionProfileDetails()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IWwanConnectionProfileDetails), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 4);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_HomeProviderId_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_AccessPointName_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Networking.Connectivity.WwanNetworkRegistrationState*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_GetNetworkRegistrationState_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Networking.Connectivity.WwanDataClass*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_GetCurrentDataClass_3;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetNetworkRegistrationState_2(IntPtr thisPtr, global::Windows.Networking.Connectivity.WwanNetworkRegistrationState* value)
        {
            global::Windows.Networking.Connectivity.WwanNetworkRegistrationState __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails>(thisPtr).GetNetworkRegistrationState();
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_GetCurrentDataClass_3(IntPtr thisPtr, global::Windows.Networking.Connectivity.WwanDataClass* value)
        {
            global::Windows.Networking.Connectivity.WwanDataClass __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails>(thisPtr).GetCurrentDataClass();
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_AccessPointName_1(IntPtr thisPtr, IntPtr* value)
        {
            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails>(thisPtr).AccessPointName;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_HomeProviderId_0(IntPtr thisPtr, IntPtr* value)
        {
            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails>(thisPtr).HomeProviderId;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Networking.Connectivity.WwanNetworkRegistrationState global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails.GetNetworkRegistrationState()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Networking.Connectivity.WwanNetworkRegistrationState __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out global::Windows.Networking.Connectivity.WwanNetworkRegistrationState, int>**)ThisPtr)[8](ThisPtr, out __retval));
            return __retval;
        }

        unsafe global::Windows.Networking.Connectivity.WwanDataClass global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails.GetCurrentDataClass()
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            global::Windows.Networking.Connectivity.WwanDataClass __retval = default;
            global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out global::Windows.Networking.Connectivity.WwanDataClass, int>**)ThisPtr)[9](ThisPtr, out __retval));
            return __retval;
        }

        unsafe string global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails.AccessPointName
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[7](ThisPtr, out __retval));
                    return MarshalString.FromAbi(__retval);
                }
                finally
                {
                    MarshalString.DisposeAbi(__retval);
                }
            }
        }

        unsafe string global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails.HomeProviderId
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, out __retval));
                    return MarshalString.FromAbi(__retval);
                }
                finally
                {
                    MarshalString.DisposeAbi(__retval);
                }
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("7A754EDE-A1ED-48B2-8E92-B460033D52E2")]
    internal unsafe interface IWwanConnectionProfileDetails2 : global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails2
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IWwanConnectionProfileDetails2()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IWwanConnectionProfileDetails2), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 2);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Networking.Connectivity.WwanNetworkIPKind*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_IPKind_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_PurposeGuids_1;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IPKind_0(IntPtr thisPtr, global::Windows.Networking.Connectivity.WwanNetworkIPKind* value)
        {
            global::Windows.Networking.Connectivity.WwanNetworkIPKind __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails2>(thisPtr).IPKind;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_PurposeGuids_1(IntPtr thisPtr, IntPtr* value)
        {
            global::System.Collections.Generic.IReadOnlyList<Guid> __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails2>(thisPtr).PurposeGuids;
                *value = MarshalInterface<global::System.Collections.Generic.IReadOnlyList<Guid>>.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Networking.Connectivity.WwanNetworkIPKind global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails2.IPKind
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails2).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                global::Windows.Networking.Connectivity.WwanNetworkIPKind __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out global::Windows.Networking.Connectivity.WwanNetworkIPKind, int>**)ThisPtr)[6](ThisPtr, out __retval));
                return __retval;
            }
        }

        unsafe global::System.Collections.Generic.IReadOnlyList<Guid> global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails2.PurposeGuids
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails2).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[7](ThisPtr, out __retval));
                    return MarshalInterface<global::System.Collections.Generic.IReadOnlyList<Guid>>.FromAbi(__retval);
                }
                finally
                {
                    MarshalInterface<global::System.Collections.Generic.IReadOnlyList<Guid>>.DisposeAbi(__retval);
                }
            }
        }
    }

    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct LanIdentifier
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.LanIdentifier obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.LanIdentifier>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.ILanIdentifier).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.LanIdentifier FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.LanIdentifier.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.LanIdentifier obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.LanIdentifier>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.LanIdentifier[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.LanIdentifier>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.LanIdentifier>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.LanIdentifier[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.LanIdentifier>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.LanIdentifier[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.LanIdentifier>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.LanIdentifier>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.LanIdentifier>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct LanIdentifierData
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.LanIdentifierData obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.LanIdentifierData>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.ILanIdentifierData).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.LanIdentifierData FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.LanIdentifierData.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.LanIdentifierData obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.LanIdentifierData>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.LanIdentifierData[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.LanIdentifierData>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.LanIdentifierData>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.LanIdentifierData[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.LanIdentifierData>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.LanIdentifierData[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.LanIdentifierData>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.LanIdentifierData>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.LanIdentifierData>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct NetworkAdapter
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.NetworkAdapter obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.NetworkAdapter>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.INetworkAdapter).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.NetworkAdapter FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.NetworkAdapter.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.NetworkAdapter obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkAdapter>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.NetworkAdapter[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkAdapter>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkAdapter>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.NetworkAdapter[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkAdapter>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.NetworkAdapter[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkAdapter>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkAdapter>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkAdapter>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct NetworkItem
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.NetworkItem obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.NetworkItem>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.INetworkItem).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.NetworkItem FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.NetworkItem.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.NetworkItem obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkItem>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.NetworkItem[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkItem>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkItem>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.NetworkItem[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkItem>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.NetworkItem[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkItem>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkItem>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkItem>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct NetworkSecuritySettings
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.NetworkSecuritySettings obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.NetworkSecuritySettings>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.INetworkSecuritySettings).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.NetworkSecuritySettings FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.NetworkSecuritySettings.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.NetworkSecuritySettings obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkSecuritySettings>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.NetworkSecuritySettings[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkSecuritySettings>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkSecuritySettings>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.NetworkSecuritySettings[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkSecuritySettings>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.NetworkSecuritySettings[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkSecuritySettings>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkSecuritySettings>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkSecuritySettings>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct NetworkStateChangeEventDetails
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.NetworkStateChangeEventDetails obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.NetworkStateChangeEventDetails>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.INetworkStateChangeEventDetails).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.NetworkStateChangeEventDetails FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.NetworkStateChangeEventDetails.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.NetworkStateChangeEventDetails obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkStateChangeEventDetails>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.NetworkStateChangeEventDetails[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkStateChangeEventDetails>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkStateChangeEventDetails>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.NetworkStateChangeEventDetails[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkStateChangeEventDetails>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.NetworkStateChangeEventDetails[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkStateChangeEventDetails>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkStateChangeEventDetails>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkStateChangeEventDetails>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    [Guid("71BA143F-598E-49D0-84EB-8FEBAEDCC195")]
    public static class NetworkStatusChangedEventHandler
    {

        private static readonly global::WinRT.Interop.IDelegateVftbl AbiToProjectionVftable;
        public static readonly IntPtr AbiToProjectionVftablePtr;

        static unsafe NetworkStatusChangedEventHandler()
        {
            AbiToProjectionVftable = new global::WinRT.Interop.IDelegateVftbl
            {
                IUnknownVftbl = global::WinRT.Interop.IUnknownVftbl.AbiToProjectionVftbl,
                Invoke = (IntPtr)(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>)&Do_Abi_Invoke
            };
            var nativeVftbl = ComWrappersSupport.AllocateVtableMemory(typeof(NetworkStatusChangedEventHandler), Marshal.SizeOf<global::WinRT.Interop.IDelegateVftbl>());
            Marshal.StructureToPtr(AbiToProjectionVftable, nativeVftbl, false);
            AbiToProjectionVftablePtr = nativeVftbl;
        }

        public static unsafe IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.NetworkStatusChangedEventHandler managedDelegate) => 
        managedDelegate is null ? null : MarshalDelegate.CreateMarshaler(managedDelegate, GuidGenerator.GetIID(typeof(NetworkStatusChangedEventHandler)));

        public static IntPtr GetAbi(IObjectReference value) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkStatusChangedEventHandler>.GetAbi(value);

        public static unsafe global::Windows.Networking.Connectivity.NetworkStatusChangedEventHandler FromAbi(IntPtr nativeDelegate)
        {
            var abiDelegate = ObjectReference<IDelegateVftbl>.FromAbi(nativeDelegate);
            return abiDelegate is null ? null : (global::Windows.Networking.Connectivity.NetworkStatusChangedEventHandler)ComWrappersSupport.TryRegisterObjectForInterface(new global::Windows.Networking.Connectivity.NetworkStatusChangedEventHandler(new NativeDelegateWrapper(abiDelegate).Invoke), nativeDelegate);
        }

        [global::WinRT.ObjectReferenceWrapper(nameof(_nativeDelegate))]
        #if NETSTANDARD2_0
        private class NativeDelegateWrapper
        #else
        private class NativeDelegateWrapper : IWinRTObject
        #endif
        {
            private readonly ObjectReference<global::WinRT.Interop.IDelegateVftbl> _nativeDelegate;
            #if NETSTANDARD2_0
            private readonly AgileReference _agileReference = default;
            #endif

            public NativeDelegateWrapper(ObjectReference<global::WinRT.Interop.IDelegateVftbl> nativeDelegate)
            {
                _nativeDelegate = nativeDelegate;
                #if NETSTANDARD2_0
                if (_nativeDelegate.TryAs<ABI.WinRT.Interop.IAgileObject.Vftbl>(out var objRef) < 0)
                {
                    _agileReference = new AgileReference(_nativeDelegate);
                }
                #else
                if (_nativeDelegate.TryAs<IUnknownVftbl>(IAgileObject.IID, out var objRef) < 0)
                {
                    var agileReference = new AgileReference(_nativeDelegate);
                    ((IWinRTObject)this).AdditionalTypeData.TryAdd(typeof(AgileReference).TypeHandle, agileReference);
                }
                #endif
                else
                {
                    objRef.Dispose();
                }
            }

            #if !NETSTANDARD2_0
            IObjectReference IWinRTObject.NativeObject => _nativeDelegate;
            bool IWinRTObject.HasUnwrappableNativeObject => true;
            global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();
            #endif

            public unsafe void Invoke(object sender)
            {
                #if NETSTANDARD2_0
                var agileReference = _agileReference;
                #else
                var agileReference = ((IWinRTObject)this).AdditionalTypeData.TryGetValue(typeof(AgileReference).TypeHandle, out var agileObj) ? (AgileReference)agileObj : null;
                #endif
                using var agileDelegate = agileReference?.Get()?.As<global::WinRT.Interop.IDelegateVftbl>(GuidGenerator.GetIID(typeof(NetworkStatusChangedEventHandler))); 
                var delegateToInvoke = agileDelegate ?? _nativeDelegate;
                IntPtr ThisPtr = delegateToInvoke.ThisPtr;
                var abiInvoke = (delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>)(delegateToInvoke.Vftbl.Invoke);
                IObjectReference __sender = default;
                try
                {
                    __sender = MarshalInspectable<object>.CreateMarshaler(sender);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR(abiInvoke(ThisPtr, MarshalInspectable<object>.GetAbi(__sender)));
                }
                finally
                {
                    MarshalInspectable<object>.DisposeMarshaler(__sender);
                }

            }
        }

        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.NetworkStatusChangedEventHandler managedDelegate) => CreateMarshaler(managedDelegate)?.GetRef() ?? IntPtr.Zero;

        public static void DisposeMarshaler(IObjectReference value) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkStatusChangedEventHandler>.DisposeMarshaler(value);

        public static void DisposeAbi(IntPtr abi) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkStatusChangedEventHandler>.DisposeAbi(abi);

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender)
        {


            try
            {
                global::WinRT.ComWrappersSupport.MarshalDelegateInvoke(thisPtr, (global::Windows.Networking.Connectivity.NetworkStatusChangedEventHandler invoke) =>
                {
                    invoke(MarshalInspectable<object>.FromAbi(sender));
                });

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
    }

    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct NetworkUsage
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.NetworkUsage obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.NetworkUsage>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.INetworkUsage).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.NetworkUsage FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.NetworkUsage.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.NetworkUsage obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkUsage>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.NetworkUsage[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkUsage>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkUsage>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.NetworkUsage[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkUsage>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.NetworkUsage[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkUsage>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkUsage>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.NetworkUsage>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ProviderNetworkUsage
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.ProviderNetworkUsage obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.ProviderNetworkUsage>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.IProviderNetworkUsage).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.ProviderNetworkUsage FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.ProviderNetworkUsage.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.ProviderNetworkUsage obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ProviderNetworkUsage>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.ProviderNetworkUsage[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ProviderNetworkUsage>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ProviderNetworkUsage>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.ProviderNetworkUsage[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ProviderNetworkUsage>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.ProviderNetworkUsage[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ProviderNetworkUsage>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ProviderNetworkUsage>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ProviderNetworkUsage>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct ProxyConfiguration
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.ProxyConfiguration obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.ProxyConfiguration>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.IProxyConfiguration).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.ProxyConfiguration FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.ProxyConfiguration.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.ProxyConfiguration obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ProxyConfiguration>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.ProxyConfiguration[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ProxyConfiguration>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ProxyConfiguration>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.ProxyConfiguration[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ProxyConfiguration>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.ProxyConfiguration[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ProxyConfiguration>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ProxyConfiguration>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.ProxyConfiguration>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct RoutePolicy
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.RoutePolicy obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.RoutePolicy>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.IRoutePolicy).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.RoutePolicy FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.RoutePolicy.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.RoutePolicy obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.RoutePolicy>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.RoutePolicy[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.RoutePolicy>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.RoutePolicy>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.RoutePolicy[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.RoutePolicy>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.RoutePolicy[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.RoutePolicy>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.RoutePolicy>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.RoutePolicy>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct WlanConnectionProfileDetails
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.WlanConnectionProfileDetails obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.WlanConnectionProfileDetails>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.IWlanConnectionProfileDetails).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.WlanConnectionProfileDetails FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.WlanConnectionProfileDetails.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.WlanConnectionProfileDetails obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.WlanConnectionProfileDetails>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.WlanConnectionProfileDetails[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.WlanConnectionProfileDetails>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.WlanConnectionProfileDetails>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.WlanConnectionProfileDetails[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.WlanConnectionProfileDetails>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.WlanConnectionProfileDetails[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.WlanConnectionProfileDetails>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.WlanConnectionProfileDetails>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.WlanConnectionProfileDetails>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct WwanConnectionProfileDetails
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.Connectivity.WwanConnectionProfileDetails obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.Connectivity.WwanConnectionProfileDetails>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.Connectivity.IWwanConnectionProfileDetails).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.Connectivity.WwanConnectionProfileDetails FromAbi(IntPtr thisPtr) => global::Windows.Networking.Connectivity.WwanConnectionProfileDetails.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.Connectivity.WwanConnectionProfileDetails obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.Connectivity.WwanConnectionProfileDetails>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.Connectivity.WwanConnectionProfileDetails[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.WwanConnectionProfileDetails>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.WwanConnectionProfileDetails>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.Connectivity.WwanConnectionProfileDetails[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.WwanConnectionProfileDetails>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.Connectivity.WwanConnectionProfileDetails[] array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.WwanConnectionProfileDetails>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.Connectivity.WwanConnectionProfileDetails>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.Connectivity.WwanConnectionProfileDetails>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
}
#pragma warning restore CA1416
