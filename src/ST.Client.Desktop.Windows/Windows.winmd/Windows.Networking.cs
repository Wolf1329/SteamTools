// This file was generated by cswinrt.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using WinRT;
using WinRT.Interop;


#pragma warning disable 0169 // warning CS0169: The field '...' is never used
#pragma warning disable 0649 // warning CS0169: Field '...' is never assigned to
#pragma warning disable CA2207, CA1063, CA1033, CA1001, CA2213

namespace Windows.Networking
{
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum DomainNameType : int
    {
        Suffix = unchecked((int)0),
        FullyQualified = unchecked((int)0x1),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class EndpointPair : global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<EndpointPair>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<IEndpointPair> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private IEndpointPair _default => _defaultLazy.Value;

        internal class _IEndpointPairFactory : IWinRTObject
        {
            private IObjectReference _obj;
            private IntPtr ThisPtr => _obj.ThisPtr;
            public _IEndpointPairFactory()
            {
                _obj = ActivationFactory<EndpointPair>.As(GuidGenerator.GetIID(typeof(Windows.Networking.IEndpointPairFactory).GetHelperType()));
            }

            private static WeakLazy<_IEndpointPairFactory> _instance = new WeakLazy<_IEndpointPairFactory>();
            internal static _IEndpointPairFactory Instance => _instance.Value;

            IObjectReference IWinRTObject.NativeObject => _obj;
            bool IWinRTObject.HasUnwrappableNativeObject => false;
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();


            public unsafe IntPtr CreateEndpointPair(HostName localHostName, string localServiceName, HostName remoteHostName, string remoteServiceName)
            {
                IObjectReference __localHostName = default;
                MarshalString __localServiceName = default;
                IObjectReference __remoteHostName = default;
                MarshalString __remoteServiceName = default;
                IntPtr __retval = default;
                try
                {
                    __localHostName = global::ABI.Windows.Networking.HostName.CreateMarshaler(localHostName);
                    __localServiceName = MarshalString.CreateMarshaler(localServiceName);
                    __remoteHostName = global::ABI.Windows.Networking.HostName.CreateMarshaler(remoteHostName);
                    __remoteServiceName = MarshalString.CreateMarshaler(remoteServiceName);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, global::ABI.Windows.Networking.HostName.GetAbi(__localHostName), MarshalString.GetAbi(__localServiceName), global::ABI.Windows.Networking.HostName.GetAbi(__remoteHostName), MarshalString.GetAbi(__remoteServiceName), out __retval));
                    return __retval;
                }
                finally
                {
                    global::ABI.Windows.Networking.HostName.DisposeMarshaler(__localHostName);
                    MarshalString.DisposeMarshaler(__localServiceName);
                    global::ABI.Windows.Networking.HostName.DisposeMarshaler(__remoteHostName);
                    MarshalString.DisposeMarshaler(__remoteServiceName);
                }
            }

        }

        public EndpointPair(HostName localHostName, string localServiceName, HostName remoteHostName, string remoteServiceName) : this(((Func<IObjectReference>)(() => {
            IntPtr ptr = (_IEndpointPairFactory.Instance.CreateEndpointPair(localHostName, localServiceName, remoteHostName, remoteServiceName));
            try
            {
                return (ComWrappersSupport.GetObjectReferenceForInterface(ptr));
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(ptr);
            }
        }))())
        {
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);
        }

        public static EndpointPair FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<EndpointPair>.FromAbi(thisPtr);
        }

        internal EndpointPair(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(IEndpointPair).GetHelperType()));
            _defaultLazy = new Lazy<IEndpointPair>(() => (IEndpointPair)new SingleInterfaceOptimizedObject(typeof(IEndpointPair), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
            };
        }

        public static bool operator ==(EndpointPair x, EndpointPair y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(EndpointPair x, EndpointPair y) => !(x == y);
        public bool Equals(EndpointPair other) => this == other;
        public override bool Equals(object obj) => obj is EndpointPair that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private IEndpointPair AsInternal(InterfaceTag<IEndpointPair> _) => _default;

        public HostName LocalHostName
        {
            get => _default.LocalHostName;
            set => _default.LocalHostName = value;
        }

        public string LocalServiceName
        {
            get => _default.LocalServiceName;
            set => _default.LocalServiceName = value;
        }

        public HostName RemoteHostName
        {
            get => _default.RemoteHostName;
            set => _default.RemoteHostName = value;
        }

        public string RemoteServiceName
        {
            get => _default.RemoteServiceName;
            set => _default.RemoteServiceName = value;
        }

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]

    [global::WinRT.ProjectedRuntimeClass(nameof(_default))]
    [global::WinRT.ObjectReferenceWrapper(nameof(_inner))]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public sealed class HostName : global::Windows.Foundation.IStringable, global::System.Runtime.InteropServices.ICustomQueryInterface, IWinRTObject, IEquatable<HostName>
    {
        private IntPtr ThisPtr => _inner == null ? (((IWinRTObject)this).NativeObject).ThisPtr : _inner.ThisPtr;

        private IObjectReference _inner = null;
        private readonly Lazy<IHostName> _defaultLazy;
        private readonly Dictionary<Type, object> _lazyInterfaces;

        private IHostName _default => _defaultLazy.Value;

        internal class _IHostNameFactory : IWinRTObject
        {
            private IObjectReference _obj;
            private IntPtr ThisPtr => _obj.ThisPtr;
            public _IHostNameFactory()
            {
                _obj = ActivationFactory<HostName>.As(GuidGenerator.GetIID(typeof(Windows.Networking.IHostNameFactory).GetHelperType()));
            }

            private static WeakLazy<_IHostNameFactory> _instance = new WeakLazy<_IHostNameFactory>();
            internal static _IHostNameFactory Instance => _instance.Value;

            IObjectReference IWinRTObject.NativeObject => _obj;
            bool IWinRTObject.HasUnwrappableNativeObject => false;
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();


            public unsafe IntPtr CreateHostName(string hostName)
            {
                MarshalString __hostName = default;
                IntPtr __retval = default;
                try
                {
                    __hostName = MarshalString.CreateMarshaler(hostName);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(__hostName), out __retval));
                    return __retval;
                }
                finally
                {
                    MarshalString.DisposeMarshaler(__hostName);
                }
            }

        }

        public HostName(string hostName) : this(((Func<IObjectReference>)(() => {
            IntPtr ptr = (_IHostNameFactory.Instance.CreateHostName(hostName));
            try
            {
                return (ComWrappersSupport.GetObjectReferenceForInterface(ptr));
            }
            finally
            {
                MarshalInspectable<object>.DisposeAbi(ptr);
            }
        }))())
        {
            ComWrappersSupport.RegisterObjectForInterface(this, ThisPtr);
            ComWrappersHelper.Init(_inner, false);
        }

        internal static BaseActivationFactory _factory = new BaseActivationFactory("Windows.Networking", "Windows.Networking.HostName");
        public static I As<I>() => _factory.AsInterface<I>();

        internal class _IHostNameStatics : IWinRTObject
        {
            private IObjectReference _obj;
            public _IHostNameStatics()
            {
                _obj = (new BaseActivationFactory("Windows.Networking", "Windows.Networking.HostName"))._As(GuidGenerator.GetIID(typeof(Windows.Networking.IHostNameStatics).GetHelperType()));
            }

            private static readonly WeakLazy<_IHostNameStatics> _instance = new WeakLazy<_IHostNameStatics>();
            internal static IHostNameStatics Instance => (IHostNameStatics)_instance.Value;

            IObjectReference IWinRTObject.NativeObject => _obj;
            bool IWinRTObject.HasUnwrappableNativeObject => false;
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
            global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();
        }

        public static int Compare(string value1, string value2) => _IHostNameStatics.Instance.Compare(value1, value2);

        public static HostName FromAbi(IntPtr thisPtr)
        {
            if (thisPtr == IntPtr.Zero) return null;
            return MarshalInspectable<HostName>.FromAbi(thisPtr);
        }

        internal HostName(IObjectReference objRef)
        {
            _inner = objRef.As(GuidGenerator.GetIID(typeof(IHostName).GetHelperType()));
            _defaultLazy = new Lazy<IHostName>(() => (IHostName)new SingleInterfaceOptimizedObject(typeof(IHostName), _inner));
            _lazyInterfaces = new Dictionary<Type, object>()
            {
                {typeof(global::Windows.Foundation.IStringable), new Lazy<global::Windows.Foundation.IStringable>(() => (global::Windows.Foundation.IStringable)(object)new SingleInterfaceOptimizedObject(typeof(global::Windows.Foundation.IStringable), _inner ?? ((IWinRTObject)this).NativeObject))},
            };
        }

        public static bool operator ==(HostName x, HostName y) => (x?.ThisPtr ?? IntPtr.Zero) == (y?.ThisPtr ?? IntPtr.Zero);
        public static bool operator !=(HostName x, HostName y) => !(x == y);
        public bool Equals(HostName other) => this == other;
        public override bool Equals(object obj) => obj is HostName that && this == that;
        public override int GetHashCode() => ThisPtr.GetHashCode();

        bool IWinRTObject.HasUnwrappableNativeObject => true;
        IObjectReference IWinRTObject.NativeObject => _inner;
        global::System.Collections.Concurrent.ConcurrentDictionary<global::System.RuntimeTypeHandle, IObjectReference> IWinRTObject.QueryInterfaceCache { get; } = new();
        global::System.Collections.Concurrent.ConcurrentDictionary<RuntimeTypeHandle, object> IWinRTObject.AdditionalTypeData { get; } = new();

        private struct InterfaceTag<I>{};

        private IHostName AsInternal(InterfaceTag<IHostName> _) => _default;

        public bool IsEqual(HostName hostName) => _default.IsEqual(hostName);

        private global::Windows.Foundation.IStringable AsInternal(InterfaceTag<global::Windows.Foundation.IStringable> _) =>  ((Lazy<global::Windows.Foundation.IStringable>)_lazyInterfaces[typeof(global::Windows.Foundation.IStringable)]).Value;

        public override string ToString() => AsInternal(new InterfaceTag<global::Windows.Foundation.IStringable>()).ToString();

        string global::Windows.Foundation.IStringable.ToString() => ToString();
        public string CanonicalName => _default.CanonicalName;

        public string DisplayName => _default.DisplayName;

        public global::Windows.Networking.Connectivity.IPInformation IPInformation => _default.IPInformation;

        public string RawName => _default.RawName;

        public HostNameType Type => _default.Type;

        private bool IsOverridableInterface(Guid iid) => false;

        global::System.Runtime.InteropServices.CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(ref Guid iid, out IntPtr ppv)
        {
            ppv = IntPtr.Zero;
            if (IsOverridableInterface(iid) || typeof(global::WinRT.IInspectable).GUID == iid)
            {
                return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
            }

            if (((IWinRTObject)this).NativeObject.TryAs<IUnknownVftbl>(iid, out ObjectReference<IUnknownVftbl> objRef) >= 0)
            {
                using (objRef)
                {
                    ppv = objRef.GetRef();
                    return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled;
                }
            }

            return global::System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled;
        }
    }
    [FlagsAttribute]
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum HostNameSortOptions : uint
    {
        None = unchecked((uint)0),
        OptimizeForLongConnections = unchecked((uint)0x2),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    [global::System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.10240.0")]
    public enum HostNameType : int
    {
        DomainName = unchecked((int)0),
        Ipv4 = unchecked((int)0x1),
        Ipv6 = unchecked((int)0x2),
        Bluetooth = unchecked((int)0x3),
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("33A0AA36-F8FA-4B30-B856-76517C3BD06D")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IEndpointPair
    {
        HostName LocalHostName { get; set; }
        string LocalServiceName { get; set; }
        HostName RemoteHostName { get; set; }
        string RemoteServiceName { get; set; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("B609D971-64E0-442B-AA6F-CC8C8F181F78")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IEndpointPairFactory
    {
        EndpointPair CreateEndpointPair(HostName localHostName, string localServiceName, HostName remoteHostName, string remoteServiceName);
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("BF8ECAAD-ED96-49A7-9084-D416CAE88DCB")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IHostName
    {
        bool IsEqual(HostName hostName);
        string CanonicalName { get; }
        string DisplayName { get; }
        global::Windows.Networking.Connectivity.IPInformation IPInformation { get; }
        string RawName { get; }
        HostNameType Type { get; }
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("458C23ED-712F-4576-ADF1-C20B2C643558")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IHostNameFactory
    {
        HostName CreateHostName(string hostName);
    }
    [global::WinRT.WindowsRuntimeType("Windows")]
    [Guid("F68CD4BF-A388-4E8B-91EA-54DD6DD901C0")]
    [Windows.Foundation.Metadata.ContractVersion(typeof(global::Windows.Foundation.UniversalApiContract), 65536u)]
    internal interface IHostNameStatics
    {
        int Compare(string value1, string value2);
    }
}

#pragma warning disable CA1416
namespace ABI.Windows.Networking
{
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct EndpointPair
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.EndpointPair obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.EndpointPair>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.IEndpointPair).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.EndpointPair FromAbi(IntPtr thisPtr) => global::Windows.Networking.EndpointPair.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.EndpointPair obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.EndpointPair>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.EndpointPair[] array) => MarshalInterfaceHelper<global::Windows.Networking.EndpointPair>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.EndpointPair>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.EndpointPair[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.EndpointPair>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.EndpointPair[] array) => MarshalInterfaceHelper<global::Windows.Networking.EndpointPair>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.EndpointPair>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.EndpointPair>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public struct HostName
    {
        public static IObjectReference CreateMarshaler(global::Windows.Networking.HostName obj) => obj is null ? null : MarshalInspectable<global::Windows.Networking.HostName>.CreateMarshaler(obj).As<IUnknownVftbl>(GuidGenerator.GetIID(typeof(global::Windows.Networking.IHostName).GetHelperType()));
        public static IntPtr GetAbi(IObjectReference value) => value is null ? IntPtr.Zero : MarshalInterfaceHelper<object>.GetAbi(value);
        public static global::Windows.Networking.HostName FromAbi(IntPtr thisPtr) => global::Windows.Networking.HostName.FromAbi(thisPtr);
        public static IntPtr FromManaged(global::Windows.Networking.HostName obj) => obj is null ? IntPtr.Zero : CreateMarshaler(obj).GetRef();
        public static unsafe MarshalInterfaceHelper<global::Windows.Networking.HostName>.MarshalerArray CreateMarshalerArray(global::Windows.Networking.HostName[] array) => MarshalInterfaceHelper<global::Windows.Networking.HostName>.CreateMarshalerArray(array, (o) => CreateMarshaler(o));
        public static (int length, IntPtr data) GetAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.HostName>.GetAbiArray(box);
        public static unsafe global::Windows.Networking.HostName[] FromAbiArray(object box) => MarshalInterfaceHelper<global::Windows.Networking.HostName>.FromAbiArray(box, FromAbi);
        public static (int length, IntPtr data) FromManagedArray(global::Windows.Networking.HostName[] array) => MarshalInterfaceHelper<global::Windows.Networking.HostName>.FromManagedArray(array, (o) => FromManaged(o));
        public static void DisposeMarshaler(IObjectReference value) => MarshalInspectable<object>.DisposeMarshaler(value);
        public static void DisposeMarshalerArray(MarshalInterfaceHelper<global::Windows.Networking.HostName>.MarshalerArray array) => MarshalInterfaceHelper<global::Windows.Networking.HostName>.DisposeMarshalerArray(array);
        public static void DisposeAbi(IntPtr abi) => MarshalInspectable<object>.DisposeAbi(abi);
        public static unsafe void DisposeAbiArray(object box) => MarshalInspectable<object>.DisposeAbiArray(box);
    }
    [DynamicInterfaceCastableImplementation]
    [Guid("33A0AA36-F8FA-4B30-B856-76517C3BD06D")]
    internal unsafe interface IEndpointPair : global::Windows.Networking.IEndpointPair
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IEndpointPair()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IEndpointPair), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 8);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_LocalHostName_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_put_LocalHostName_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_LocalServiceName_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_put_LocalServiceName_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_get_RemoteHostName_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_put_RemoteHostName_5;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[12] = &Do_Abi_get_RemoteServiceName_6;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>*)AbiToProjectionVftablePtr)[13] = &Do_Abi_put_RemoteServiceName_7;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_LocalHostName_1(IntPtr thisPtr, IntPtr value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.IEndpointPair>(thisPtr).LocalHostName = global::ABI.Windows.Networking.HostName.FromAbi(value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_LocalHostName_0(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Networking.HostName __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.IEndpointPair>(thisPtr).LocalHostName;
                *value = global::ABI.Windows.Networking.HostName.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_LocalServiceName_3(IntPtr thisPtr, IntPtr value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.IEndpointPair>(thisPtr).LocalServiceName = MarshalString.FromAbi(value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_LocalServiceName_2(IntPtr thisPtr, IntPtr* value)
        {
            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.IEndpointPair>(thisPtr).LocalServiceName;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_RemoteHostName_5(IntPtr thisPtr, IntPtr value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.IEndpointPair>(thisPtr).RemoteHostName = global::ABI.Windows.Networking.HostName.FromAbi(value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_RemoteHostName_4(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Networking.HostName __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.IEndpointPair>(thisPtr).RemoteHostName;
                *value = global::ABI.Windows.Networking.HostName.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_put_RemoteServiceName_7(IntPtr thisPtr, IntPtr value)
        {


            try
            {
                global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.IEndpointPair>(thisPtr).RemoteServiceName = MarshalString.FromAbi(value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_RemoteServiceName_6(IntPtr thisPtr, IntPtr* value)
        {
            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.IEndpointPair>(thisPtr).RemoteServiceName;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Networking.HostName global::Windows.Networking.IEndpointPair.LocalHostName
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.IEndpointPair).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, out __retval));
                    return global::ABI.Windows.Networking.HostName.FromAbi(__retval);
                }
                finally
                {
                    global::ABI.Windows.Networking.HostName.DisposeAbi(__retval);
                }
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.IEndpointPair).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IObjectReference __value = default;
                try
                {
                    __value = global::ABI.Windows.Networking.HostName.CreateMarshaler(value);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[7](ThisPtr, global::ABI.Windows.Networking.HostName.GetAbi(__value)));
                }
                finally
                {
                    global::ABI.Windows.Networking.HostName.DisposeMarshaler(__value);
                }
            }
        }

        unsafe string global::Windows.Networking.IEndpointPair.LocalServiceName
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.IEndpointPair).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[8](ThisPtr, out __retval));
                    return MarshalString.FromAbi(__retval);
                }
                finally
                {
                    MarshalString.DisposeAbi(__retval);
                }
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.IEndpointPair).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                MarshalString __value = default;
                try
                {
                    __value = MarshalString.CreateMarshaler(value);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[9](ThisPtr, MarshalString.GetAbi(__value)));
                }
                finally
                {
                    MarshalString.DisposeMarshaler(__value);
                }
            }
        }

        unsafe global::Windows.Networking.HostName global::Windows.Networking.IEndpointPair.RemoteHostName
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.IEndpointPair).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[10](ThisPtr, out __retval));
                    return global::ABI.Windows.Networking.HostName.FromAbi(__retval);
                }
                finally
                {
                    global::ABI.Windows.Networking.HostName.DisposeAbi(__retval);
                }
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.IEndpointPair).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IObjectReference __value = default;
                try
                {
                    __value = global::ABI.Windows.Networking.HostName.CreateMarshaler(value);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[11](ThisPtr, global::ABI.Windows.Networking.HostName.GetAbi(__value)));
                }
                finally
                {
                    global::ABI.Windows.Networking.HostName.DisposeMarshaler(__value);
                }
            }
        }

        unsafe string global::Windows.Networking.IEndpointPair.RemoteServiceName
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.IEndpointPair).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[12](ThisPtr, out __retval));
                    return MarshalString.FromAbi(__retval);
                }
                finally
                {
                    MarshalString.DisposeAbi(__retval);
                }
            }
            set
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.IEndpointPair).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                MarshalString __value = default;
                try
                {
                    __value = MarshalString.CreateMarshaler(value);
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, int>**)ThisPtr)[13](ThisPtr, MarshalString.GetAbi(__value)));
                }
                finally
                {
                    MarshalString.DisposeMarshaler(__value);
                }
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("B609D971-64E0-442B-AA6F-CC8C8F181F78")]
    internal unsafe interface IEndpointPairFactory : global::Windows.Networking.IEndpointPairFactory
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IEndpointPairFactory()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IEndpointPairFactory), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_CreateEndpointPair_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_CreateEndpointPair_0(IntPtr thisPtr, IntPtr localHostName, IntPtr localServiceName, IntPtr remoteHostName, IntPtr remoteServiceName, IntPtr* value)
        {
            global::Windows.Networking.EndpointPair __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.IEndpointPairFactory>(thisPtr).CreateEndpointPair(global::ABI.Windows.Networking.HostName.FromAbi(localHostName), MarshalString.FromAbi(localServiceName), global::ABI.Windows.Networking.HostName.FromAbi(remoteHostName), MarshalString.FromAbi(remoteServiceName));
                *value = global::ABI.Windows.Networking.EndpointPair.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Networking.EndpointPair global::Windows.Networking.IEndpointPairFactory.CreateEndpointPair(global::Windows.Networking.HostName localHostName, string localServiceName, global::Windows.Networking.HostName remoteHostName, string remoteServiceName)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.IEndpointPairFactory).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IObjectReference __localHostName = default;
            MarshalString __localServiceName = default;
            IObjectReference __remoteHostName = default;
            MarshalString __remoteServiceName = default;
            IntPtr __retval = default;
            try
            {
                __localHostName = global::ABI.Windows.Networking.HostName.CreateMarshaler(localHostName);
                __localServiceName = MarshalString.CreateMarshaler(localServiceName);
                __remoteHostName = global::ABI.Windows.Networking.HostName.CreateMarshaler(remoteHostName);
                __remoteServiceName = MarshalString.CreateMarshaler(remoteServiceName);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, global::ABI.Windows.Networking.HostName.GetAbi(__localHostName), MarshalString.GetAbi(__localServiceName), global::ABI.Windows.Networking.HostName.GetAbi(__remoteHostName), MarshalString.GetAbi(__remoteServiceName), out __retval));
                return global::ABI.Windows.Networking.EndpointPair.FromAbi(__retval);
            }
            finally
            {
                global::ABI.Windows.Networking.HostName.DisposeMarshaler(__localHostName);
                MarshalString.DisposeMarshaler(__localServiceName);
                global::ABI.Windows.Networking.HostName.DisposeMarshaler(__remoteHostName);
                MarshalString.DisposeMarshaler(__remoteServiceName);
                global::ABI.Windows.Networking.EndpointPair.DisposeAbi(__retval);
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("BF8ECAAD-ED96-49A7-9084-D416CAE88DCB")]
    internal unsafe interface IHostName : global::Windows.Networking.IHostName
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IHostName()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IHostName), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 6);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_get_IPInformation_0;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[7] = &Do_Abi_get_RawName_1;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[8] = &Do_Abi_get_DisplayName_2;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[9] = &Do_Abi_get_CanonicalName_3;
            ((delegate* unmanaged[Stdcall]<IntPtr, global::Windows.Networking.HostNameType*, int>*)AbiToProjectionVftablePtr)[10] = &Do_Abi_get_Type_4;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, byte*, int>*)AbiToProjectionVftablePtr)[11] = &Do_Abi_IsEqual_5;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_IsEqual_5(IntPtr thisPtr, IntPtr hostName, byte* isEqual)
        {
            bool __isEqual = default;

            *isEqual = default;

            try
            {
                __isEqual = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.IHostName>(thisPtr).IsEqual(global::ABI.Windows.Networking.HostName.FromAbi(hostName));
                *isEqual = (byte)(__isEqual ? 1 : 0);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_CanonicalName_3(IntPtr thisPtr, IntPtr* value)
        {
            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.IHostName>(thisPtr).CanonicalName;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_DisplayName_2(IntPtr thisPtr, IntPtr* value)
        {
            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.IHostName>(thisPtr).DisplayName;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_IPInformation_0(IntPtr thisPtr, IntPtr* value)
        {
            global::Windows.Networking.Connectivity.IPInformation __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.IHostName>(thisPtr).IPInformation;
                *value = global::ABI.Windows.Networking.Connectivity.IPInformation.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_RawName_1(IntPtr thisPtr, IntPtr* value)
        {
            string __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.IHostName>(thisPtr).RawName;
                *value = MarshalString.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }
        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_get_Type_4(IntPtr thisPtr, global::Windows.Networking.HostNameType* value)
        {
            global::Windows.Networking.HostNameType __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.IHostName>(thisPtr).Type;
                *value = __value;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe bool global::Windows.Networking.IHostName.IsEqual(global::Windows.Networking.HostName hostName)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.IHostName).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            IObjectReference __hostName = default;
            byte __retval = default;
            try
            {
                __hostName = global::ABI.Windows.Networking.HostName.CreateMarshaler(hostName);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, out byte, int>**)ThisPtr)[11](ThisPtr, global::ABI.Windows.Networking.HostName.GetAbi(__hostName), out __retval));
                return __retval != 0;
            }
            finally
            {
                global::ABI.Windows.Networking.HostName.DisposeMarshaler(__hostName);
            }
        }

        unsafe string global::Windows.Networking.IHostName.CanonicalName
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.IHostName).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[9](ThisPtr, out __retval));
                    return MarshalString.FromAbi(__retval);
                }
                finally
                {
                    MarshalString.DisposeAbi(__retval);
                }
            }
        }

        unsafe string global::Windows.Networking.IHostName.DisplayName
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.IHostName).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[8](ThisPtr, out __retval));
                    return MarshalString.FromAbi(__retval);
                }
                finally
                {
                    MarshalString.DisposeAbi(__retval);
                }
            }
        }

        unsafe global::Windows.Networking.Connectivity.IPInformation global::Windows.Networking.IHostName.IPInformation
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.IHostName).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, out __retval));
                    return global::ABI.Windows.Networking.Connectivity.IPInformation.FromAbi(__retval);
                }
                finally
                {
                    global::ABI.Windows.Networking.Connectivity.IPInformation.DisposeAbi(__retval);
                }
            }
        }

        unsafe string global::Windows.Networking.IHostName.RawName
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.IHostName).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                IntPtr __retval = default;
                try
                {
                    global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out IntPtr, int>**)ThisPtr)[7](ThisPtr, out __retval));
                    return MarshalString.FromAbi(__retval);
                }
                finally
                {
                    MarshalString.DisposeAbi(__retval);
                }
            }
        }

        unsafe global::Windows.Networking.HostNameType global::Windows.Networking.IHostName.Type
        {
            get
            {
                var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.IHostName).TypeHandle));
                var ThisPtr = _obj.ThisPtr;

                global::Windows.Networking.HostNameType __retval = default;
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, out global::Windows.Networking.HostNameType, int>**)ThisPtr)[10](ThisPtr, out __retval));
                return __retval;
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("458C23ED-712F-4576-ADF1-C20B2C643558")]
    internal unsafe interface IHostNameFactory : global::Windows.Networking.IHostNameFactory
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IHostNameFactory()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IHostNameFactory), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_CreateHostName_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_CreateHostName_0(IntPtr thisPtr, IntPtr hostName, IntPtr* value)
        {
            global::Windows.Networking.HostName __value = default;

            *value = default;

            try
            {
                __value = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.IHostNameFactory>(thisPtr).CreateHostName(MarshalString.FromAbi(hostName));
                *value = global::ABI.Windows.Networking.HostName.FromManaged(__value);

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe global::Windows.Networking.HostName global::Windows.Networking.IHostNameFactory.CreateHostName(string hostName)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.IHostNameFactory).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            MarshalString __hostName = default;
            IntPtr __retval = default;
            try
            {
                __hostName = MarshalString.CreateMarshaler(hostName);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, out IntPtr, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(__hostName), out __retval));
                return global::ABI.Windows.Networking.HostName.FromAbi(__retval);
            }
            finally
            {
                MarshalString.DisposeMarshaler(__hostName);
                global::ABI.Windows.Networking.HostName.DisposeAbi(__retval);
            }
        }
    }

    [DynamicInterfaceCastableImplementation]
    [Guid("F68CD4BF-A388-4E8B-91EA-54DD6DD901C0")]
    internal unsafe interface IHostNameStatics : global::Windows.Networking.IHostNameStatics
    {

        public static IntPtr AbiToProjectionVftablePtr;
        static unsafe IHostNameStatics()
        {
            AbiToProjectionVftablePtr = ComWrappersSupport.AllocateVtableMemory(typeof(IHostNameStatics), sizeof(IInspectable.Vftbl) + sizeof(IntPtr) * 1);
            *(IInspectable.Vftbl*)AbiToProjectionVftablePtr = IInspectable.Vftbl.AbiToProjectionVftable;
            ((delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, int*, int>*)AbiToProjectionVftablePtr)[6] = &Do_Abi_Compare_0;
        }

        [UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
        private static unsafe int Do_Abi_Compare_0(IntPtr thisPtr, IntPtr value1, IntPtr value2, int* result)
        {
            int __result = default;

            *result = default;

            try
            {
                __result = global::WinRT.ComWrappersSupport.FindObject<global::Windows.Networking.IHostNameStatics>(thisPtr).Compare(MarshalString.FromAbi(value1), MarshalString.FromAbi(value2));
                *result = __result;

            }
            catch (Exception __exception__)
            {
                global::WinRT.ExceptionHelpers.SetErrorInfo(__exception__);
                return global::WinRT.ExceptionHelpers.GetHRForException(__exception__);
            }
            return 0;
        }

        unsafe int global::Windows.Networking.IHostNameStatics.Compare(string value1, string value2)
        {
            var _obj = ((IObjectReference)((IWinRTObject)this).GetObjectReferenceForType(typeof(global::Windows.Networking.IHostNameStatics).TypeHandle));
            var ThisPtr = _obj.ThisPtr;

            MarshalString __value1 = default;
            MarshalString __value2 = default;
            int __retval = default;
            try
            {
                __value1 = MarshalString.CreateMarshaler(value1);
                __value2 = MarshalString.CreateMarshaler(value2);
                global::WinRT.ExceptionHelpers.ThrowExceptionForHR((*(delegate* unmanaged[Stdcall]<IntPtr, IntPtr, IntPtr, out int, int>**)ThisPtr)[6](ThisPtr, MarshalString.GetAbi(__value1), MarshalString.GetAbi(__value2), out __retval));
                return __retval;
            }
            finally
            {
                MarshalString.DisposeMarshaler(__value1);
                MarshalString.DisposeMarshaler(__value2);
            }
        }
    }

}
#pragma warning restore CA1416
